/*
 * سرویس‌های پلتفرم مالی پی‌پینگ
 * # مستندات سرویس‌های عمومی پلت‌فرم مالی پی‌پینگ   لینک‌های پشتیبانی: تلگرام: [t.me/payping](t.me/payping) | ایمیل: [info@payping.ir]() | تلفن: 02175038797  # مقدمه   تمامی وب‌ سرویس‌های توضیح داده شده در این مستندات به صورت [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) هستند و طبق همین چهارچوب باید با آنها ارتباط برقرار کرد.   توضیحات تکمیلی‌تر هر سرویس در آدرس زیر به صورت کامل قرار داده شده است.   جهت رفع هرگونه مشکل و یا پرسش با پشتیبانی در تماس باشید.   [راهنمای تکمیلی وب‌سرویس‌ها](https://www.payping.io/help/fa/category/api--qspohi/)    # POSTMAN  برای راحتی کار، فایل postman سرویس ها برای شما آماده شده است که می توانید از لینک زیر روند استفاده از آن را مطالعه بفرمایین و قالب مربوطه را دانلود نمایید.    [راهنمای postman](https://www.payping.io/help/fa/postman/)   # توضیحات تکمیلی برای تمام سرویس‌ها   برای فراخوانی سرویس‌های صفحه‌بندی (pagination) اگر پارامتر ورودی ارسال نشود، حداکثر ۱۰ آیتم نمایش داده می‌شود و همچنین حداکثر تعداد دریافت آیتم به ازای هر درخواست ۵۰ عدد می‌باشد و بیشتر از آن را سرویس پشتیبانی نمی‌کند و در صورت نیاز به بارگزاری تمام آیتم‌های یک سرویس به صورت یکجا با ایمیل به بخش پشتیبانی در تماس باشید. همینطور توجه داشته باشین واحد پول در تمام سرویس‌ها تومان می‌باشد و منطقه زمانی تمامی‌ تاریخ و ساعت‌ها برابر با ساعت جهانی یا UTC می‌باشد.   # نکاتی برای آپلود فایل‌ها   برای آپلود هرگونه فایل اعم از عکس پروفایل کاربران و یا گزارشات پرداخت‌ها و ... می‌بایست که از [سرویس بارگذاری فایل](#tag/Upload) استفاده کنید.    پس از انجام عملیات آپلود توسط سرویس بارگذاری فایل، تنها کافیست نام فایل آپلود شده که در خروجی سرویس به شما برگردانده می‌شود را ذخیره نمایید.   # جدول کدهای دریافتی از هر سرویس   بعد از ارسال هر درخواست به سمت سرور، از سمت ما طبق قواعد وب‌سرویس‌های RESTful یک کدی به شما بازگرداننده می‌شود.  هر کد معنایی دارد که در جدول زیر توضیحات مربوطه را می‌بینید   |شماره کد|توضیحات|  |-------|--------|  |`200`| عملیات با موفقیت انجام شد |  |`400`| مشکلی در ارسال درخواست وجود دارد |  |`500`| مشکلی در سرور رخ داده است |  |`503`| سرور در حال حاضر قادر به پاسخگویی نمی‌باشد |  |`401`| عدم دسترسی|  |`403`| دسترسی غیر مجاز |  |`404`| آیتم درخواستی مورد نظر موجود نمی‌باشد |  
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateMultiPaymentViewModel', 'model/CreatePaymentViewModel', 'model/PaymentResult', 'model/UnBlockMoneyViewModel', 'model/VerifyPaymentViewModel'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateMultiPaymentViewModel'), require('../model/CreatePaymentViewModel'), require('../model/PaymentResult'), require('../model/UnBlockMoneyViewModel'), require('../model/VerifyPaymentViewModel'));
  } else {
    // Browser globals (root is window)
    if (!root._) {
      root._ = {};
    }
    root._.PaymentApi = factory(root._.ApiClient, root._.CreateMultiPaymentViewModel, root._.CreatePaymentViewModel, root._.PaymentResult, root._.UnBlockMoneyViewModel, root._.VerifyPaymentViewModel);
  }
}(this, function(ApiClient, CreateMultiPaymentViewModel, CreatePaymentViewModel, PaymentResult, UnBlockMoneyViewModel, VerifyPaymentViewModel) {
  'use strict';

  /**
   * Payment service.
   * @module api/PaymentApi
   * @version v1
   */

  /**
   * Constructs a new PaymentApi. 
   * @alias module:api/PaymentApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the paymentBlockMoney operation.
     * @callback module:api/PaymentApi~paymentBlockMoneyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ساخت پرداخت مسدود شده
     * به کمک این متد می توانید برای یک نفر پرداخت تضمینی ایجاد کنید.   
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMultiPaymentViewModel} opts.model مشخصات پرداخت
     * @param {module:api/PaymentApi~paymentBlockMoneyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentResult}
     */
    this.paymentBlockMoney = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PaymentResult;

      return this.apiClient.callApi(
        '/v1/pay/BlockMoney', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentCancelPayment operation.
     * @callback module:api/PaymentApi~paymentCancelPaymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * برای لغو کردن یک کد پرداخت می توانید از این متد استفاده کنید
     * @param {String} code کد پرداخت
     * @param {module:api/PaymentApi~paymentCancelPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.paymentCancelPayment = function(code, callback) {
      var postBody = null;

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling paymentCancelPayment");
      }


      var pathParams = {
        'code': code
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/pay/{code}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentCreateMultiPayment operation.
     * @callback module:api/PaymentApi~paymentCreateMultiPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ساخت پرداخت تسهیمی
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMultiPaymentViewModel} opts.model مشخصات پرداخت
     * @param {module:api/PaymentApi~paymentCreateMultiPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentResult}
     */
    this.paymentCreateMultiPayment = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PaymentResult;

      return this.apiClient.callApi(
        '/v1/pay/Multi', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentCreatePayment operation.
     * @callback module:api/PaymentApi~paymentCreatePaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ساخت پرداخت
     * به کمک این متد می توانید برای یک نفر کد پرداخت ایجاد کنید.   
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePaymentViewModel} opts.model مشخصات پرداخت
     * @param {module:api/PaymentApi~paymentCreatePaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentResult}
     */
    this.paymentCreatePayment = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PaymentResult;

      return this.apiClient.callApi(
        '/v1/pay', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentUnBlockMoney operation.
     * @callback module:api/PaymentApi~paymentUnBlockMoneyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * آزاد سازی پول مسدود شده
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/UnBlockMoneyViewModel} opts.model مشخصات پرداخت
     * @param {module:api/PaymentApi~paymentUnBlockMoneyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentResult}
     */
    this.paymentUnBlockMoney = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PaymentResult;

      return this.apiClient.callApi(
        '/v1/pay/UnBlockMoney', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentVerifyPayment operation.
     * @callback module:api/PaymentApi~paymentVerifyPaymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * تایید پرداخت
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/VerifyPaymentViewModel} opts.model مشخصات پرداخت
     * @param {module:api/PaymentApi~paymentVerifyPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.paymentVerifyPayment = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/pay/verify', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
