/*
 * سرویس‌های پلتفرم مالی پی‌پینگ
 * # مستندات سرویس‌های عمومی پلت‌فرم مالی پی‌پینگ   لینک‌های پشتیبانی: تلگرام: [t.me/payping](t.me/payping) | ایمیل: [info@payping.ir]() | تلفن: 02175038797  # مقدمه   تمامی وب‌ سرویس‌های توضیح داده شده در این مستندات به صورت [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) هستند و طبق همین چهارچوب باید با آنها ارتباط برقرار کرد.   توضیحات تکمیلی‌تر هر سرویس در آدرس زیر به صورت کامل قرار داده شده است.   جهت رفع هرگونه مشکل و یا پرسش با پشتیبانی در تماس باشید.   [راهنمای تکمیلی وب‌سرویس‌ها](https://www.payping.io/help/fa/category/api--qspohi/)    # POSTMAN  برای راحتی کار، فایل postman سرویس ها برای شما آماده شده است که می توانید از لینک زیر روند استفاده از آن را مطالعه بفرمایین و قالب مربوطه را دانلود نمایید.    [راهنمای postman](https://www.payping.io/help/fa/postman/)   # توضیحات تکمیلی برای تمام سرویس‌ها   برای فراخوانی سرویس‌های صفحه‌بندی (pagination) اگر پارامتر ورودی ارسال نشود، حداکثر ۱۰ آیتم نمایش داده می‌شود و همچنین حداکثر تعداد دریافت آیتم به ازای هر درخواست ۵۰ عدد می‌باشد و بیشتر از آن را سرویس پشتیبانی نمی‌کند و در صورت نیاز به بارگزاری تمام آیتم‌های یک سرویس به صورت یکجا با ایمیل به بخش پشتیبانی در تماس باشید. همینطور توجه داشته باشین واحد پول در تمام سرویس‌ها تومان می‌باشد و منطقه زمانی تمامی‌ تاریخ و ساعت‌ها برابر با ساعت جهانی یا UTC می‌باشد.   # نکاتی برای آپلود فایل‌ها   برای آپلود هرگونه فایل اعم از عکس پروفایل کاربران و یا گزارشات پرداخت‌ها و ... می‌بایست که از [سرویس بارگذاری فایل](#tag/Upload) استفاده کنید.    پس از انجام عملیات آپلود توسط سرویس بارگذاری فایل، تنها کافیست نام فایل آپلود شده که در خروجی سرویس به شما برگردانده می‌شود را ذخیره نمایید.   # جدول کدهای دریافتی از هر سرویس   بعد از ارسال هر درخواست به سمت سرور، از سمت ما طبق قواعد وب‌سرویس‌های RESTful یک کدی به شما بازگرداننده می‌شود.  هر کد معنایی دارد که در جدول زیر توضیحات مربوطه را می‌بینید   |شماره کد|توضیحات|  |-------|--------|  |`200`| عملیات با موفقیت انجام شد |  |`400`| مشکلی در ارسال درخواست وجود دارد |  |`500`| مشکلی در سرور رخ داده است |  |`503`| سرور در حال حاضر قادر به پاسخگویی نمی‌باشد |  |`401`| عدم دسترسی|  |`403`| دسترسی غیر مجاز |  |`404`| آیتم درخواستی مورد نظر موجود نمی‌باشد |  
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddressBookDetailViewModel', 'model/InvoiceCancelRequest', 'model/InvoiceCancelResponse', 'model/InvoiceConfirmPaymentResponseViewModel', 'model/InvoiceCreateScheduleViewModel', 'model/InvoiceCreateViewModel', 'model/InvoiceDashboardReportViewModel', 'model/InvoiceDetailViewModel', 'model/InvoiceEditViewModel', 'model/InvoiceListItemViewModel', 'model/InvoicePdfResponseViewModel', 'model/InvoiceSendByTemplate', 'model/InvoiceSendByTemplateSimple', 'model/InvoiceSendInvoiceResponseViewModel', 'model/InvoiceSendReminderResponseViewModel', 'model/InvoiceSetCustomerRequestViewModel', 'model/InvoiceSubSchulderDetailViewModel', 'model/ListCountViewModel', 'model/ScheduleInvoiceWithChilds'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddressBookDetailViewModel'), require('../model/InvoiceCancelRequest'), require('../model/InvoiceCancelResponse'), require('../model/InvoiceConfirmPaymentResponseViewModel'), require('../model/InvoiceCreateScheduleViewModel'), require('../model/InvoiceCreateViewModel'), require('../model/InvoiceDashboardReportViewModel'), require('../model/InvoiceDetailViewModel'), require('../model/InvoiceEditViewModel'), require('../model/InvoiceListItemViewModel'), require('../model/InvoicePdfResponseViewModel'), require('../model/InvoiceSendByTemplate'), require('../model/InvoiceSendByTemplateSimple'), require('../model/InvoiceSendInvoiceResponseViewModel'), require('../model/InvoiceSendReminderResponseViewModel'), require('../model/InvoiceSetCustomerRequestViewModel'), require('../model/InvoiceSubSchulderDetailViewModel'), require('../model/ListCountViewModel'), require('../model/ScheduleInvoiceWithChilds'));
  } else {
    // Browser globals (root is window)
    if (!root._) {
      root._ = {};
    }
    root._.InvoiceApi = factory(root._.ApiClient, root._.AddressBookDetailViewModel, root._.InvoiceCancelRequest, root._.InvoiceCancelResponse, root._.InvoiceConfirmPaymentResponseViewModel, root._.InvoiceCreateScheduleViewModel, root._.InvoiceCreateViewModel, root._.InvoiceDashboardReportViewModel, root._.InvoiceDetailViewModel, root._.InvoiceEditViewModel, root._.InvoiceListItemViewModel, root._.InvoicePdfResponseViewModel, root._.InvoiceSendByTemplate, root._.InvoiceSendByTemplateSimple, root._.InvoiceSendInvoiceResponseViewModel, root._.InvoiceSendReminderResponseViewModel, root._.InvoiceSetCustomerRequestViewModel, root._.InvoiceSubSchulderDetailViewModel, root._.ListCountViewModel, root._.ScheduleInvoiceWithChilds);
  }
}(this, function(ApiClient, AddressBookDetailViewModel, InvoiceCancelRequest, InvoiceCancelResponse, InvoiceConfirmPaymentResponseViewModel, InvoiceCreateScheduleViewModel, InvoiceCreateViewModel, InvoiceDashboardReportViewModel, InvoiceDetailViewModel, InvoiceEditViewModel, InvoiceListItemViewModel, InvoicePdfResponseViewModel, InvoiceSendByTemplate, InvoiceSendByTemplateSimple, InvoiceSendInvoiceResponseViewModel, InvoiceSendReminderResponseViewModel, InvoiceSetCustomerRequestViewModel, InvoiceSubSchulderDetailViewModel, ListCountViewModel, ScheduleInvoiceWithChilds) {
  'use strict';

  /**
   * Invoice service.
   * @module api/InvoiceApi
   * @version v1
   */

  /**
   * Constructs a new InvoiceApi. 
   * @alias module:api/InvoiceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the invoiceBuyer operation.
     * @callback module:api/InvoiceApi~invoiceBuyerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressBookDetailViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * دریافت مشخصات پرداخت کننده فاکتور
     * @param {String} code 
     * @param {module:api/InvoiceApi~invoiceBuyerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressBookDetailViewModel}
     */
    this.invoiceBuyer = function(code, callback) {
      var postBody = null;

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling invoiceBuyer");
      }


      var pathParams = {
        'code': code
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AddressBookDetailViewModel;

      return this.apiClient.callApi(
        '/v1/Invoice/Buyer/{code}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceCancel operation.
     * @callback module:api/InvoiceApi~invoiceCancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceCancelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * درخواست لغو فاکتور
     * @param {Object} opts Optional parameters
     * @param {module:model/InvoiceCancelRequest} opts.value 
     * @param {module:api/InvoiceApi~invoiceCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceCancelResponse}
     */
    this.invoiceCancel = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['value'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InvoiceCancelResponse;

      return this.apiClient.callApi(
        '/v1/Invoice/Cancel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceDelete operation.
     * @callback module:api/InvoiceApi~invoiceDeleteCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * حذف فاکتور
     * @param {String} code کلید یکتای فاکتور
     * @param {module:api/InvoiceApi~invoiceDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.invoiceDelete = function(code, callback) {
      var postBody = null;

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling invoiceDelete");
      }


      var pathParams = {
        'code': code
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/v1/Invoice/{code}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceDeleteSchedule operation.
     * @callback module:api/InvoiceApi~invoiceDeleteScheduleCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * حذف فاکتور زمانبندی شده
     * @param {String} code کلید یکتای فاکتور زمانبندی شده
     * @param {module:api/InvoiceApi~invoiceDeleteScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.invoiceDeleteSchedule = function(code, callback) {
      var postBody = null;

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling invoiceDeleteSchedule");
      }


      var pathParams = {
        'code': code
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/v1/Invoice/DeleteSchedule/{code}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceGet operation.
     * @callback module:api/InvoiceApi~invoiceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceDetailViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * دریافت فاکتور
     * @param {String} code کلید یکتای فاکتور
     * @param {module:api/InvoiceApi~invoiceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceDetailViewModel}
     */
    this.invoiceGet = function(code, callback) {
      var postBody = null;

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling invoiceGet");
      }


      var pathParams = {
        'code': code
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InvoiceDetailViewModel;

      return this.apiClient.callApi(
        '/v1/Invoice/{code}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceList operation.
     * @callback module:api/InvoiceApi~invoiceListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvoiceListItemViewModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * لیست فاکتور ها
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset  (default to 0)
     * @param {Number} opts.limit  (default to 10)
     * @param {module:model/Number} opts.status فیلتر وضعیت (default to 5)
     * @param {Boolean} opts.isArchived فیلتر بایگانی (default to false)
     * @param {Boolean} opts.searchByDueDate فیلتر با تاریخ سررسید (default to false)
     * @param {Boolean} opts.searchByCreateDate فیلتر با تاریخ ثبت (default to false)
     * @param {Date} opts.searchDateFrom شروع از تاریخ
     * @param {Date} opts.searchDateTo تا تاریخ
     * @param {String} opts.search متن جستجو
     * @param {String} opts.addressBookCode فیلتر بر اساس کد مشتری
     * @param {String} opts.invoiceCode فیلتر براساس کد فاکتور
     * @param {module:api/InvoiceApi~invoiceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvoiceListItemViewModel>}
     */
    this.invoiceList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'status': opts['status'],
        'isArchived': opts['isArchived'],
        'searchByDueDate': opts['searchByDueDate'],
        'searchByCreateDate': opts['searchByCreateDate'],
        'searchDateFrom': opts['searchDateFrom'],
        'searchDateTo': opts['searchDateTo'],
        'search': opts['search'],
        'addressBookCode': opts['addressBookCode'],
        'invoiceCode': opts['invoiceCode'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InvoiceListItemViewModel];

      return this.apiClient.callApi(
        '/v1/Invoice/List', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceListCount operation.
     * @callback module:api/InvoiceApi~invoiceListCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCountViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * تعداد فاکتور ها
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.status فیلتر وضعیت (default to 5)
     * @param {Boolean} opts.isArchived فیلتر بایگانی (default to false)
     * @param {Boolean} opts.searchByDueDate فیلتر با تاریخ سررسید (default to false)
     * @param {Boolean} opts.searchByCreateDate فیلتر با تاریخ ثبت (default to false)
     * @param {Date} opts.searchDateFrom شروع از تاریخ
     * @param {Date} opts.searchDateTo تا تاریخ
     * @param {String} opts.search متن جستجو
     * @param {String} opts.addressBookCode فیلتر بر اساس کد مشتری
     * @param {String} opts.invoiceCode فیلتر براساس کد فاکتور
     * @param {module:api/InvoiceApi~invoiceListCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCountViewModel}
     */
    this.invoiceListCount = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'status': opts['status'],
        'isArchived': opts['isArchived'],
        'searchByDueDate': opts['searchByDueDate'],
        'searchByCreateDate': opts['searchByCreateDate'],
        'searchDateFrom': opts['searchDateFrom'],
        'searchDateTo': opts['searchDateTo'],
        'search': opts['search'],
        'addressBookCode': opts['addressBookCode'],
        'invoiceCode': opts['invoiceCode'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListCountViewModel;

      return this.apiClient.callApi(
        '/v1/Invoice/ListCount', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceListSchedule operation.
     * @callback module:api/InvoiceApi~invoiceListScheduleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvoiceListItemViewModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * لیست فاکتور ها زمانبندی شده
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset  (default to 0)
     * @param {Number} opts.limit  (default to 10)
     * @param {module:model/Number} opts.status فیلتر وضعیت (default to 5)
     * @param {Boolean} opts.isArchived فیلتر بایگانی (default to false)
     * @param {Boolean} opts.searchByDueDate فیلتر با تاریخ سررسید (default to false)
     * @param {Boolean} opts.searchByCreateDate فیلتر با تاریخ ثبت (default to false)
     * @param {Date} opts.searchDateFrom شروع از تاریخ
     * @param {Date} opts.searchDateTo تا تاریخ
     * @param {String} opts.search متن جستجو
     * @param {String} opts.addressBookCode فیلتر بر اساس کد مشتری
     * @param {String} opts.invoiceCode فیلتر براساس کد فاکتور
     * @param {module:api/InvoiceApi~invoiceListScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvoiceListItemViewModel>}
     */
    this.invoiceListSchedule = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'status': opts['status'],
        'isArchived': opts['isArchived'],
        'searchByDueDate': opts['searchByDueDate'],
        'searchByCreateDate': opts['searchByCreateDate'],
        'searchDateFrom': opts['searchDateFrom'],
        'searchDateTo': opts['searchDateTo'],
        'search': opts['search'],
        'addressBookCode': opts['addressBookCode'],
        'invoiceCode': opts['invoiceCode'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InvoiceListItemViewModel];

      return this.apiClient.callApi(
        '/v1/Invoice/ListSchedule', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceListScheduleCount operation.
     * @callback module:api/InvoiceApi~invoiceListScheduleCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCountViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * تعداد فاکتور ها زمانبندی شده
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.status فیلتر وضعیت (default to 5)
     * @param {Boolean} opts.isArchived فیلتر بایگانی (default to false)
     * @param {Boolean} opts.searchByDueDate فیلتر با تاریخ سررسید (default to false)
     * @param {Boolean} opts.searchByCreateDate فیلتر با تاریخ ثبت (default to false)
     * @param {Date} opts.searchDateFrom شروع از تاریخ
     * @param {Date} opts.searchDateTo تا تاریخ
     * @param {String} opts.search متن جستجو
     * @param {String} opts.addressBookCode فیلتر بر اساس کد مشتری
     * @param {String} opts.invoiceCode فیلتر براساس کد فاکتور
     * @param {module:api/InvoiceApi~invoiceListScheduleCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCountViewModel}
     */
    this.invoiceListScheduleCount = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'status': opts['status'],
        'isArchived': opts['isArchived'],
        'searchByDueDate': opts['searchByDueDate'],
        'searchByCreateDate': opts['searchByCreateDate'],
        'searchDateFrom': opts['searchDateFrom'],
        'searchDateTo': opts['searchDateTo'],
        'search': opts['search'],
        'addressBookCode': opts['addressBookCode'],
        'invoiceCode': opts['invoiceCode'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListCountViewModel;

      return this.apiClient.callApi(
        '/v1/Invoice/ListScheduleCount', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoicePdf operation.
     * @callback module:api/InvoiceApi~invoicePdfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoicePdfResponseViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * درخواست فاکتور غیر رسمی
     * @param {String} code کلید یکتای فاکتور
     * @param {module:api/InvoiceApi~invoicePdfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoicePdfResponseViewModel}
     */
    this.invoicePdf = function(code, callback) {
      var postBody = null;

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling invoicePdf");
      }


      var pathParams = {
        'code': code
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InvoicePdfResponseViewModel;

      return this.apiClient.callApi(
        '/v1/Invoice/Pdf/{code}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoicePost operation.
     * @callback module:api/InvoiceApi~invoicePostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvoiceDetailViewModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * فاکتور جدید
     * @param {Object} opts Optional parameters
     * @param {module:model/InvoiceCreateViewModel} opts.value مشخصات فاکتور
     * @param {module:api/InvoiceApi~invoicePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvoiceDetailViewModel>}
     */
    this.invoicePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['value'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [InvoiceDetailViewModel];

      return this.apiClient.callApi(
        '/v1/Invoice', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoicePut operation.
     * @callback module:api/InvoiceApi~invoicePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceDetailViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * بروزرسانی فاکتور
     * @param {String} code کلید یکتای فاکتور
     * @param {Object} opts Optional parameters
     * @param {module:model/InvoiceEditViewModel} opts.value فاکتور بروز شده
     * @param {module:api/InvoiceApi~invoicePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceDetailViewModel}
     */
    this.invoicePut = function(code, opts, callback) {
      opts = opts || {};
      var postBody = opts['value'];

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling invoicePut");
      }


      var pathParams = {
        'code': code
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InvoiceDetailViewModel;

      return this.apiClient.callApi(
        '/v1/Invoice/{code}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceReminder operation.
     * @callback module:api/InvoiceApi~invoiceReminderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceSendReminderResponseViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ارسال یادآوری فاکتور
     * @param {String} code کلید یکتای فاکتور
     * @param {module:api/InvoiceApi~invoiceReminderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceSendReminderResponseViewModel}
     */
    this.invoiceReminder = function(code, callback) {
      var postBody = null;

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling invoiceReminder");
      }


      var pathParams = {
        'code': code
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InvoiceSendReminderResponseViewModel;

      return this.apiClient.callApi(
        '/v1/Invoice/Reminder/{code}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceScheduleGet operation.
     * @callback module:api/InvoiceApi~invoiceScheduleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleInvoiceWithChilds} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * دریافت فاکتور زمانبندی شده
     * @param {String} code 
     * @param {module:api/InvoiceApi~invoiceScheduleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleInvoiceWithChilds}
     */
    this.invoiceScheduleGet = function(code, callback) {
      var postBody = null;

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling invoiceScheduleGet");
      }


      var pathParams = {
        'code': code
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ScheduleInvoiceWithChilds;

      return this.apiClient.callApi(
        '/v1/Invoice/Schedule/{code}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceSchedulePost operation.
     * @callback module:api/InvoiceApi~invoiceSchedulePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceDetailViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * فاکتور زمانبندی شده جدید
     * @param {Object} opts Optional parameters
     * @param {module:model/InvoiceCreateScheduleViewModel} opts.value مشخصات فاکتور زمانبندی شده
     * @param {module:api/InvoiceApi~invoiceSchedulePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceDetailViewModel}
     */
    this.invoiceSchedulePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['value'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InvoiceDetailViewModel;

      return this.apiClient.callApi(
        '/v1/Invoice/Schedule', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceSend operation.
     * @callback module:api/InvoiceApi~invoiceSendCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceSendInvoiceResponseViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ارسال فاکتور
     * @param {String} code کلید یکتای فاکتور
     * @param {module:api/InvoiceApi~invoiceSendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceSendInvoiceResponseViewModel}
     */
    this.invoiceSend = function(code, callback) {
      var postBody = null;

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling invoiceSend");
      }


      var pathParams = {
        'code': code
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InvoiceSendInvoiceResponseViewModel;

      return this.apiClient.callApi(
        '/v1/Invoice/Send/{code}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceSendByTemplateAdvance operation.
     * @callback module:api/InvoiceApi~invoiceSendByTemplateAdvanceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvoiceDetailViewModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ارسال فاکتور جدید با استفاده از قالب - پیشرفته
     * @param {Object} opts Optional parameters
     * @param {module:model/InvoiceSendByTemplate} opts.value مشخصات فاکتور
     * @param {module:api/InvoiceApi~invoiceSendByTemplateAdvanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvoiceDetailViewModel>}
     */
    this.invoiceSendByTemplateAdvance = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['value'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [InvoiceDetailViewModel];

      return this.apiClient.callApi(
        '/v1/Invoice/SendByTemplateAdvance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceSendByTemplateSimple operation.
     * @callback module:api/InvoiceApi~invoiceSendByTemplateSimpleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceDetailViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ارسال فاکتور جدید با استفاده از قالب - سریع
     * @param {Object} opts Optional parameters
     * @param {module:model/InvoiceSendByTemplateSimple} opts.value مشخصات فاکتور
     * @param {module:api/InvoiceApi~invoiceSendByTemplateSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceDetailViewModel}
     */
    this.invoiceSendByTemplateSimple = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['value'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InvoiceDetailViewModel;

      return this.apiClient.callApi(
        '/v1/Invoice/SendByTemplateSimple', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceSetCustomer operation.
     * @callback module:api/InvoiceApi~invoiceSetCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceConfirmPaymentResponseViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ثبت مشتری به فاکتور
     * @param {Object} opts Optional parameters
     * @param {module:model/InvoiceSetCustomerRequestViewModel} opts.value 
     * @param {module:api/InvoiceApi~invoiceSetCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceConfirmPaymentResponseViewModel}
     */
    this.invoiceSetCustomer = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['value'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InvoiceConfirmPaymentResponseViewModel;

      return this.apiClient.callApi(
        '/v1/Invoice/SetCustomer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceSubschedulers operation.
     * @callback module:api/InvoiceApi~invoiceSubschedulersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvoiceSubSchulderDetailViewModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * دریافت اطلاعات زمانبندی شده فاکتور
     * @param {String} code 
     * @param {module:api/InvoiceApi~invoiceSubschedulersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvoiceSubSchulderDetailViewModel>}
     */
    this.invoiceSubschedulers = function(code, callback) {
      var postBody = null;

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling invoiceSubschedulers");
      }


      var pathParams = {
        'code': code
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InvoiceSubSchulderDetailViewModel];

      return this.apiClient.callApi(
        '/v1/Invoice/Subschedulers/{code}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceSumPerStatus operation.
     * @callback module:api/InvoiceApi~invoiceSumPerStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceDashboardReportViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * گزارش جمع مبلغ فاکتور ها براساس وضعیت
     * @param {module:api/InvoiceApi~invoiceSumPerStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceDashboardReportViewModel}
     */
    this.invoiceSumPerStatus = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InvoiceDashboardReportViewModel;

      return this.apiClient.callApi(
        '/v1/Invoice/SumPerStatus', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
