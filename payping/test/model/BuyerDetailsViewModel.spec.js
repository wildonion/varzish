/*
 * سرویس‌های پلتفرم مالی پی‌پینگ
 * # مستندات سرویس‌های عمومی پلت‌فرم مالی پی‌پینگ   لینک‌های پشتیبانی: تلگرام: [t.me/payping](t.me/payping) | ایمیل: [info@payping.ir]() | تلفن: 02175038797  # مقدمه   تمامی وب‌ سرویس‌های توضیح داده شده در این مستندات به صورت [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) هستند و طبق همین چهارچوب باید با آنها ارتباط برقرار کرد.   توضیحات تکمیلی‌تر هر سرویس در آدرس زیر به صورت کامل قرار داده شده است.   جهت رفع هرگونه مشکل و یا پرسش با پشتیبانی در تماس باشید.   [راهنمای تکمیلی وب‌سرویس‌ها](https://www.payping.io/help/fa/category/api--qspohi/)    # POSTMAN  برای راحتی کار، فایل postman سرویس ها برای شما آماده شده است که می توانید از لینک زیر روند استفاده از آن را مطالعه بفرمایین و قالب مربوطه را دانلود نمایید.    [راهنمای postman](https://www.payping.io/help/fa/postman/)   # توضیحات تکمیلی برای تمام سرویس‌ها   برای فراخوانی سرویس‌های صفحه‌بندی (pagination) اگر پارامتر ورودی ارسال نشود، حداکثر ۱۰ آیتم نمایش داده می‌شود و همچنین حداکثر تعداد دریافت آیتم به ازای هر درخواست ۵۰ عدد می‌باشد و بیشتر از آن را سرویس پشتیبانی نمی‌کند و در صورت نیاز به بارگزاری تمام آیتم‌های یک سرویس به صورت یکجا با ایمیل به بخش پشتیبانی در تماس باشید. همینطور توجه داشته باشین واحد پول در تمام سرویس‌ها تومان می‌باشد و منطقه زمانی تمامی‌ تاریخ و ساعت‌ها برابر با ساعت جهانی یا UTC می‌باشد.   # نکاتی برای آپلود فایل‌ها   برای آپلود هرگونه فایل اعم از عکس پروفایل کاربران و یا گزارشات پرداخت‌ها و ... می‌بایست که از [سرویس بارگذاری فایل](#tag/Upload) استفاده کنید.    پس از انجام عملیات آپلود توسط سرویس بارگذاری فایل، تنها کافیست نام فایل آپلود شده که در خروجی سرویس به شما برگردانده می‌شود را ذخیره نمایید.   # جدول کدهای دریافتی از هر سرویس   بعد از ارسال هر درخواست به سمت سرور، از سمت ما طبق قواعد وب‌سرویس‌های RESTful یک کدی به شما بازگرداننده می‌شود.  هر کد معنایی دارد که در جدول زیر توضیحات مربوطه را می‌بینید   |شماره کد|توضیحات|  |-------|--------|  |`200`| عملیات با موفقیت انجام شد |  |`400`| مشکلی در ارسال درخواست وجود دارد |  |`500`| مشکلی در سرور رخ داده است |  |`503`| سرور در حال حاضر قادر به پاسخگویی نمی‌باشد |  |`401`| عدم دسترسی|  |`403`| دسترسی غیر مجاز |  |`404`| آیتم درخواستی مورد نظر موجود نمی‌باشد |  
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root._);
  }
}(this, function(expect, _) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('BuyerDetailsViewModel', function() {
      beforeEach(function() {
        instance = new _.BuyerDetailsViewModel();
      });

      it('should create an instance of BuyerDetailsViewModel', function() {
        // TODO: update the code to test BuyerDetailsViewModel
        expect(instance).to.be.a(_.BuyerDetailsViewModel);
      });

      it('should have the property code (base name: "code")', function() {
        // TODO: update the code to test the property code
        expect(instance).to.have.property('code');
        // expect(instance.code).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property addressLine (base name: "addressLine")', function() {
        // TODO: update the code to test the property addressLine
        expect(instance).to.have.property('addressLine');
        // expect(instance.addressLine).to.be(expectedValueLiteral);
      });

      it('should have the property postalCode (base name: "postalCode")', function() {
        // TODO: update the code to test the property postalCode
        expect(instance).to.have.property('postalCode');
        // expect(instance.postalCode).to.be(expectedValueLiteral);
      });

      it('should have the property firstName (base name: "firstName")', function() {
        // TODO: update the code to test the property firstName
        expect(instance).to.have.property('firstName');
        // expect(instance.firstName).to.be(expectedValueLiteral);
      });

      it('should have the property lastName (base name: "lastName")', function() {
        // TODO: update the code to test the property lastName
        expect(instance).to.have.property('lastName');
        // expect(instance.lastName).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property city (base name: "city")', function() {
        // TODO: update the code to test the property city
        expect(instance).to.have.property('city');
        // expect(instance.city).to.be(expectedValueLiteral);
      });

      it('should have the property phone (base name: "phone")', function() {
        // TODO: update the code to test the property phone
        expect(instance).to.have.property('phone');
        // expect(instance.phone).to.be(expectedValueLiteral);
      });

      it('should have the property customDescription (base name: "customDescription")', function() {
        // TODO: update the code to test the property customDescription
        expect(instance).to.have.property('customDescription');
        // expect(instance.customDescription).to.be(expectedValueLiteral);
      });

      it('should have the property permanLinkCode (base name: "permanLinkCode")', function() {
        // TODO: update the code to test the property permanLinkCode
        expect(instance).to.have.property('permanLinkCode');
        // expect(instance.permanLinkCode).to.be(expectedValueLiteral);
      });

      it('should have the property productInfo (base name: "productInfo")', function() {
        // TODO: update the code to test the property productInfo
        expect(instance).to.have.property('productInfo');
        // expect(instance.productInfo).to.be(expectedValueLiteral);
      });

      it('should have the property couponCode (base name: "couponCode")', function() {
        // TODO: update the code to test the property couponCode
        expect(instance).to.have.property('couponCode');
        // expect(instance.couponCode).to.be(expectedValueLiteral);
      });

      it('should have the property productCode (base name: "productCode")', function() {
        // TODO: update the code to test the property productCode
        expect(instance).to.have.property('productCode');
        // expect(instance.productCode).to.be(expectedValueLiteral);
      });

      it('should have the property campaignCode (base name: "campaignCode")', function() {
        // TODO: update the code to test the property campaignCode
        expect(instance).to.have.property('campaignCode');
        // expect(instance.campaignCode).to.be(expectedValueLiteral);
      });

      it('should have the property isPaid (base name: "isPaid")', function() {
        // TODO: update the code to test the property isPaid
        expect(instance).to.have.property('isPaid');
        // expect(instance.isPaid).to.be(expectedValueLiteral);
      });

      it('should have the property payerId (base name: "payerId")', function() {
        // TODO: update the code to test the property payerId
        expect(instance).to.have.property('payerId');
        // expect(instance.payerId).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceNo (base name: "invoiceNo")', function() {
        // TODO: update the code to test the property invoiceNo
        expect(instance).to.have.property('invoiceNo');
        // expect(instance.invoiceNo).to.be(expectedValueLiteral);
      });

      it('should have the property payDate (base name: "payDate")', function() {
        // TODO: update the code to test the property payDate
        expect(instance).to.have.property('payDate');
        // expect(instance.payDate).to.be(expectedValueLiteral);
      });

      it('should have the property fullName (base name: "fullName")', function() {
        // TODO: update the code to test the property fullName
        expect(instance).to.have.property('fullName');
        // expect(instance.fullName).to.be(expectedValueLiteral);
      });

    });
  });

}));
