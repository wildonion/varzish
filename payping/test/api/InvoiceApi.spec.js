/*
 * سرویس‌های پلتفرم مالی پی‌پینگ
 * # مستندات سرویس‌های عمومی پلت‌فرم مالی پی‌پینگ   لینک‌های پشتیبانی: تلگرام: [t.me/payping](t.me/payping) | ایمیل: [info@payping.ir]() | تلفن: 02175038797  # مقدمه   تمامی وب‌ سرویس‌های توضیح داده شده در این مستندات به صورت [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) هستند و طبق همین چهارچوب باید با آنها ارتباط برقرار کرد.   توضیحات تکمیلی‌تر هر سرویس در آدرس زیر به صورت کامل قرار داده شده است.   جهت رفع هرگونه مشکل و یا پرسش با پشتیبانی در تماس باشید.   [راهنمای تکمیلی وب‌سرویس‌ها](https://www.payping.io/help/fa/category/api--qspohi/)    # POSTMAN  برای راحتی کار، فایل postman سرویس ها برای شما آماده شده است که می توانید از لینک زیر روند استفاده از آن را مطالعه بفرمایین و قالب مربوطه را دانلود نمایید.    [راهنمای postman](https://www.payping.io/help/fa/postman/)   # توضیحات تکمیلی برای تمام سرویس‌ها   برای فراخوانی سرویس‌های صفحه‌بندی (pagination) اگر پارامتر ورودی ارسال نشود، حداکثر ۱۰ آیتم نمایش داده می‌شود و همچنین حداکثر تعداد دریافت آیتم به ازای هر درخواست ۵۰ عدد می‌باشد و بیشتر از آن را سرویس پشتیبانی نمی‌کند و در صورت نیاز به بارگزاری تمام آیتم‌های یک سرویس به صورت یکجا با ایمیل به بخش پشتیبانی در تماس باشید. همینطور توجه داشته باشین واحد پول در تمام سرویس‌ها تومان می‌باشد و منطقه زمانی تمامی‌ تاریخ و ساعت‌ها برابر با ساعت جهانی یا UTC می‌باشد.   # نکاتی برای آپلود فایل‌ها   برای آپلود هرگونه فایل اعم از عکس پروفایل کاربران و یا گزارشات پرداخت‌ها و ... می‌بایست که از [سرویس بارگذاری فایل](#tag/Upload) استفاده کنید.    پس از انجام عملیات آپلود توسط سرویس بارگذاری فایل، تنها کافیست نام فایل آپلود شده که در خروجی سرویس به شما برگردانده می‌شود را ذخیره نمایید.   # جدول کدهای دریافتی از هر سرویس   بعد از ارسال هر درخواست به سمت سرور، از سمت ما طبق قواعد وب‌سرویس‌های RESTful یک کدی به شما بازگرداننده می‌شود.  هر کد معنایی دارد که در جدول زیر توضیحات مربوطه را می‌بینید   |شماره کد|توضیحات|  |-------|--------|  |`200`| عملیات با موفقیت انجام شد |  |`400`| مشکلی در ارسال درخواست وجود دارد |  |`500`| مشکلی در سرور رخ داده است |  |`503`| سرور در حال حاضر قادر به پاسخگویی نمی‌باشد |  |`401`| عدم دسترسی|  |`403`| دسترسی غیر مجاز |  |`404`| آیتم درخواستی مورد نظر موجود نمی‌باشد |  
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root._);
  }
}(this, function(expect, _) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new _.InvoiceApi();
  });

  describe('(package)', function() {
    describe('InvoiceApi', function() {
      describe('invoiceBuyer', function() {
        it('should call invoiceBuyer successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceBuyer call and complete the assertions
          /*
          var code = "code_example";

          instance.invoiceBuyer(code, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(_.AddressBookDetailViewModel);
            expect(data.code).to.be.a('string');
            expect(data.code).to.be("");
            expect(data.userPhotoFileAddress).to.be.a('string');
            expect(data.userPhotoFileAddress).to.be("");
            expect(data.userPhotoFileId).to.be.a('string');
            expect(data.userPhotoFileId).to.be("");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("info@example.com");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("09110000000");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("پوریا");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("منفرد");
            expect(data.businessName).to.be.a('string');
            expect(data.businessName).to.be("پی پینگ");
            expect(data.additionalInfo).to.be.a('string');
            expect(data.additionalInfo).to.be("او یک وکیل است");
            expect(data.memo).to.be.a('string');
            expect(data.memo).to.be("در پی پینگ با ایشان آشنا شدم");
            expect(data.zipCode).to.be.a('string');
            expect(data.zipCode).to.be("46169696164");
            expect(data.state).to.be.a('string');
            expect(data.state).to.be("تهران");
            expect(data.city).to.be.a('string');
            expect(data.city).to.be("تهران");
            expect(data.location).to.be.a('string');
            expect(data.location).to.be("خیابان جمهوری");
            expect(data.isBusiness).to.be.a('boolean');
            expect(data.isBusiness).to.be(false);
            expect(data.nationalId).to.be.a('string');
            expect(data.nationalId).to.be("22266655591");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceCancel', function() {
        it('should call invoiceCancel successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceCancel call and complete the assertions
          /*
          var opts = {};
          opts.value = new _.InvoiceCancelRequest();
          opts.value.code = "";
          opts.value.previewKey = "";

          instance.invoiceCancel(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(_.InvoiceCancelResponse);
            expect(data.code).to.be.a('string');
            expect(data.code).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceDelete', function() {
        it('should call invoiceDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceDelete call and complete the assertions
          /*
          var code = "code_example";

          instance.invoiceDelete(code, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceDeleteSchedule', function() {
        it('should call invoiceDeleteSchedule successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceDeleteSchedule call and complete the assertions
          /*
          var code = "code_example";

          instance.invoiceDeleteSchedule(code, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceGet', function() {
        it('should call invoiceGet successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceGet call and complete the assertions
          /*
          var code = "code_example";

          instance.invoiceGet(code, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(_.InvoiceDetailViewModel);
            expect(data.code).to.be.a('string');
            expect(data.code).to.be("");
            expect(data.parentCode).to.be.a('string');
            expect(data.parentCode).to.be("");
            expect(data.paymentCode).to.be.a('string');
            expect(data.paymentCode).to.be("");
            {
              let dataCtr = data.ccToes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(_.InvoiceCcToDetailViewModel);
                expect(data.emailAddress).to.be.a('string');
                expect(data.emailAddress).to.be("");

                      }
            }
            {
              let dataCtr = data.billToes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(_.InvoiceBillToDetailViewModel);
                expect(data.addressBook).to.be.a(_.AddressBookDetailViewModel);
                      expect(data.addressBook.code).to.be.a('string');
                  expect(data.addressBook.code).to.be("");
                  expect(data.addressBook.userPhotoFileAddress).to.be.a('string');
                  expect(data.addressBook.userPhotoFileAddress).to.be("");
                  expect(data.addressBook.userPhotoFileId).to.be.a('string');
                  expect(data.addressBook.userPhotoFileId).to.be("");
                  expect(data.addressBook.email).to.be.a('string');
                  expect(data.addressBook.email).to.be("info@example.com");
                  expect(data.addressBook.phone).to.be.a('string');
                  expect(data.addressBook.phone).to.be("09110000000");
                  expect(data.addressBook.firstName).to.be.a('string');
                  expect(data.addressBook.firstName).to.be("پوریا");
                  expect(data.addressBook.lastName).to.be.a('string');
                  expect(data.addressBook.lastName).to.be("منفرد");
                  expect(data.addressBook.businessName).to.be.a('string');
                  expect(data.addressBook.businessName).to.be("پی پینگ");
                  expect(data.addressBook.additionalInfo).to.be.a('string');
                  expect(data.addressBook.additionalInfo).to.be("او یک وکیل است");
                  expect(data.addressBook.memo).to.be.a('string');
                  expect(data.addressBook.memo).to.be("در پی پینگ با ایشان آشنا شدم");
                  expect(data.addressBook.zipCode).to.be.a('string');
                  expect(data.addressBook.zipCode).to.be("46169696164");
                  expect(data.addressBook.state).to.be.a('string');
                  expect(data.addressBook.state).to.be("تهران");
                  expect(data.addressBook.city).to.be.a('string');
                  expect(data.addressBook.city).to.be("تهران");
                  expect(data.addressBook.location).to.be.a('string');
                  expect(data.addressBook.location).to.be("خیابان جمهوری");
                  expect(data.addressBook.isBusiness).to.be.a('boolean');
                  expect(data.addressBook.isBusiness).to.be(false);
                  expect(data.addressBook.nationalId).to.be.a('string');
                  expect(data.addressBook.nationalId).to.be("22266655591");

                      }
            }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(0);
            expect(data.paidManualDescription).to.be.a('string');
            expect(data.paidManualDescription).to.be("");
            expect(data.saveToTemplate).to.be.a('boolean');
            expect(data.saveToTemplate).to.be(false);
            expect(data.invoiceNumber).to.be.a('number');
            expect(data.invoiceNumber).to.be("0");
            expect(data.invoiceTitle).to.be.a('string');
            expect(data.invoiceTitle).to.be("");
            expect(data.invoiceDateTime).to.be.a(Date);
            expect(data.invoiceDateTime).to.be(new Date());
            expect(data.dueDate).to.be.a(Date);
            expect(data.dueDate).to.be(new Date());
            expect(data.payedDateTime).to.be.a(Date);
            expect(data.payedDateTime).to.be(new Date());
            expect(data.canceledDateTime).to.be.a(Date);
            expect(data.canceledDateTime).to.be(new Date());
            expect(data.subTotal).to.be.a('number');
            expect(data.subTotal).to.be(0.0);
            expect(data.itemsDiscountAmount).to.be.a('number');
            expect(data.itemsDiscountAmount).to.be(0.0);
            expect(data.totalDiscountAmount).to.be.a('number');
            expect(data.totalDiscountAmount).to.be(0.0);
            expect(data.totalDiscountPercent).to.be.a('number');
            expect(data.totalDiscountPercent).to.be(0);
            expect(data.totalDiscountType).to.be.a('number');
            expect(data.totalDiscountType).to.be(0);
            expect(data.sumDiscountAmount).to.be.a('number');
            expect(data.sumDiscountAmount).to.be(0.0);
            expect(data.totalTaxtionAmount).to.be.a('number');
            expect(data.totalTaxtionAmount).to.be(0.0);
            expect(data.shipping).to.be.a('number');
            expect(data.shipping).to.be(0.0);
            expect(data.total).to.be.a('number');
            expect(data.total).to.be(0.0);
            expect(data.notes).to.be.a('string');
            expect(data.notes).to.be("");
            expect(data.termsAndConditions).to.be.a('string');
            expect(data.termsAndConditions).to.be("");
            expect(data.memo).to.be.a('string');
            expect(data.memo).to.be("");
            expect(data.invoiceSchulder).to.be.a(_.InvoiceSchulderDetailViewModel);
                  expect(data.invoiceSchulder.repeat).to.be.a('number');
              expect(data.invoiceSchulder.repeat).to.be(0);
              expect(data.invoiceSchulder.schulderType).to.be.a('number');
              expect(data.invoiceSchulder.schulderType).to.be(0);
              expect(data.invoiceSchulder.dueType).to.be.a('number');
              expect(data.invoiceSchulder.dueType).to.be(0);
              expect(data.invoiceSchulder.endValue).to.be.a('string');
              expect(data.invoiceSchulder.endValue).to.be("");
              expect(data.invoiceSchulder.dueDateAfterHowManyDay).to.be.a('number');
              expect(data.invoiceSchulder.dueDateAfterHowManyDay).to.be(0);
              {
                let dataCtr = data.invoiceSchulder.invoiceSubSchulders;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(_.InvoiceSubSchulderDetailViewModel);
                  expect(data.dueDate).to.be.a(Date);
                  expect(data.dueDate).to.be(new Date());
                  expect(data.mustBeCreateInDateTime).to.be.a(Date);
                  expect(data.mustBeCreateInDateTime).to.be(new Date());
                  expect(data.deActiveDateTime).to.be.a(Date);
                  expect(data.deActiveDateTime).to.be(new Date());
                  expect(data.isInvoiceCreated).to.be.a('boolean');
                  expect(data.isInvoiceCreated).to.be(false);
                  expect(data.isActive).to.be.a('boolean');
                  expect(data.isActive).to.be(false);
                  expect(data.invoiceCode).to.be.a('string');
                  expect(data.invoiceCode).to.be("");
  
                        }
              }
            {
              let dataCtr = data.invoiceItems;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(_.InvoiceItemDetailViewModel);
                expect(data.code).to.be.a('string');
                expect(data.code).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0);
                expect(data.discountType).to.be.a('number');
                expect(data.discountType).to.be(0);
                expect(data.discountPercent).to.be.a('number');
                expect(data.discountPercent).to.be(0);
                expect(data.discountAmount).to.be.a('number');
                expect(data.discountAmount).to.be(0.0);
                expect(data.tax).to.be.a('boolean');
                expect(data.tax).to.be(false);
                expect(data.taxRate).to.be.a('number');
                expect(data.taxRate).to.be(0);
                expect(data.price).to.be.a('number');
                expect(data.price).to.be(0.0);
                expect(data.totalPrice).to.be.a('number');
                expect(data.totalPrice).to.be(0.0);
                expect(data.amount).to.be.a('number');
                expect(data.amount).to.be(0.0);

                      }
            }
            expect(data.isSendAttachmentsAfterPayment).to.be.a('boolean');
            expect(data.isSendAttachmentsAfterPayment).to.be(false);
            expect(data.isSendNotesAndTermsAfterPayment).to.be.a('boolean');
            expect(data.isSendNotesAndTermsAfterPayment).to.be(false);
            expect(data.isSendTermsAfterPayment).to.be.a('boolean');
            expect(data.isSendTermsAfterPayment).to.be(false);
            {
              let dataCtr = data.attachFileIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.attachFileAddresses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.qrCodeFileName).to.be.a('string');
            expect(data.qrCodeFileName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceList', function() {
        it('should call invoiceList successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceList call and complete the assertions
          /*
          var opts = {};
          opts.offset = 0;
          opts.limit = 10;
          opts.status = 5;
          opts.isArchived = false;
          opts.searchByDueDate = false;
          opts.searchByCreateDate = false;
          opts.searchDateFrom = new Date("2013-10-20T19:20:30+01:00");
          opts.searchDateTo = new Date("2013-10-20T19:20:30+01:00");
          opts.search = "search_example";
          opts.addressBookCode = "addressBookCode_example";
          opts.invoiceCode = "invoiceCode_example";

          instance.invoiceList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(_.InvoiceListItemViewModel);
              expect(data.code).to.be.a('string');
              expect(data.code).to.be("");
              expect(data.invoiceNumber).to.be.a('number');
              expect(data.invoiceNumber).to.be("0");
              expect(data.invoiceDateTime).to.be.a(Date);
              expect(data.invoiceDateTime).to.be(new Date());
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.payedDateTime).to.be.a(Date);
              expect(data.payedDateTime).to.be(new Date());
              expect(data.canceledDateTime).to.be.a(Date);
              expect(data.canceledDateTime).to.be(new Date());
              expect(data.invoiceTitle).to.be.a('string');
              expect(data.invoiceTitle).to.be("");
              expect(data.status).to.be.a('number');
              expect(data.status).to.be(0);
              expect(data.total).to.be.a('number');
              expect(data.total).to.be(0.0);
              {
                let dataCtr = data.ccToes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(_.InvoiceCcToListItemViewModel);
                  expect(data.emailAddress).to.be.a('string');
                  expect(data.emailAddress).to.be("");
  
                        }
              }
              {
                let dataCtr = data.billToes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(_.InvoiceBillToListItemViewModel);
                  expect(data.addressBook).to.be.a(_.AddressBookListItemViewModel);
                        expect(data.addressBook.code).to.be.a('string');
                    expect(data.addressBook.code).to.be("");
                    expect(data.addressBook.email).to.be.a('string');
                    expect(data.addressBook.email).to.be("");
                    expect(data.addressBook.phone).to.be.a('string');
                    expect(data.addressBook.phone).to.be("");
                    expect(data.addressBook.firstName).to.be.a('string');
                    expect(data.addressBook.firstName).to.be("");
                    expect(data.addressBook.lastName).to.be.a('string');
                    expect(data.addressBook.lastName).to.be("");
                    expect(data.addressBook.businessName).to.be.a('string');
                    expect(data.addressBook.businessName).to.be("");
                    expect(data.addressBook.nationalId).to.be.a('string');
                    expect(data.addressBook.nationalId).to.be("");
                    expect(data.addressBook.isBusiness).to.be.a('string');
                    expect(data.addressBook.isBusiness).to.be("");
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceListCount', function() {
        it('should call invoiceListCount successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceListCount call and complete the assertions
          /*
          var opts = {};
          opts.status = 5;
          opts.isArchived = false;
          opts.searchByDueDate = false;
          opts.searchByCreateDate = false;
          opts.searchDateFrom = new Date("2013-10-20T19:20:30+01:00");
          opts.searchDateTo = new Date("2013-10-20T19:20:30+01:00");
          opts.search = "search_example";
          opts.addressBookCode = "addressBookCode_example";
          opts.invoiceCode = "invoiceCode_example";

          instance.invoiceListCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(_.ListCountViewModel);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceListSchedule', function() {
        it('should call invoiceListSchedule successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceListSchedule call and complete the assertions
          /*
          var opts = {};
          opts.offset = 0;
          opts.limit = 10;
          opts.status = 5;
          opts.isArchived = false;
          opts.searchByDueDate = false;
          opts.searchByCreateDate = false;
          opts.searchDateFrom = new Date("2013-10-20T19:20:30+01:00");
          opts.searchDateTo = new Date("2013-10-20T19:20:30+01:00");
          opts.search = "search_example";
          opts.addressBookCode = "addressBookCode_example";
          opts.invoiceCode = "invoiceCode_example";

          instance.invoiceListSchedule(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(_.InvoiceListItemViewModel);
              expect(data.code).to.be.a('string');
              expect(data.code).to.be("");
              expect(data.invoiceNumber).to.be.a('number');
              expect(data.invoiceNumber).to.be("0");
              expect(data.invoiceDateTime).to.be.a(Date);
              expect(data.invoiceDateTime).to.be(new Date());
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.payedDateTime).to.be.a(Date);
              expect(data.payedDateTime).to.be(new Date());
              expect(data.canceledDateTime).to.be.a(Date);
              expect(data.canceledDateTime).to.be(new Date());
              expect(data.invoiceTitle).to.be.a('string');
              expect(data.invoiceTitle).to.be("");
              expect(data.status).to.be.a('number');
              expect(data.status).to.be(0);
              expect(data.total).to.be.a('number');
              expect(data.total).to.be(0.0);
              {
                let dataCtr = data.ccToes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(_.InvoiceCcToListItemViewModel);
                  expect(data.emailAddress).to.be.a('string');
                  expect(data.emailAddress).to.be("");
  
                        }
              }
              {
                let dataCtr = data.billToes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(_.InvoiceBillToListItemViewModel);
                  expect(data.addressBook).to.be.a(_.AddressBookListItemViewModel);
                        expect(data.addressBook.code).to.be.a('string');
                    expect(data.addressBook.code).to.be("");
                    expect(data.addressBook.email).to.be.a('string');
                    expect(data.addressBook.email).to.be("");
                    expect(data.addressBook.phone).to.be.a('string');
                    expect(data.addressBook.phone).to.be("");
                    expect(data.addressBook.firstName).to.be.a('string');
                    expect(data.addressBook.firstName).to.be("");
                    expect(data.addressBook.lastName).to.be.a('string');
                    expect(data.addressBook.lastName).to.be("");
                    expect(data.addressBook.businessName).to.be.a('string');
                    expect(data.addressBook.businessName).to.be("");
                    expect(data.addressBook.nationalId).to.be.a('string');
                    expect(data.addressBook.nationalId).to.be("");
                    expect(data.addressBook.isBusiness).to.be.a('string');
                    expect(data.addressBook.isBusiness).to.be("");
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceListScheduleCount', function() {
        it('should call invoiceListScheduleCount successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceListScheduleCount call and complete the assertions
          /*
          var opts = {};
          opts.status = 5;
          opts.isArchived = false;
          opts.searchByDueDate = false;
          opts.searchByCreateDate = false;
          opts.searchDateFrom = new Date("2013-10-20T19:20:30+01:00");
          opts.searchDateTo = new Date("2013-10-20T19:20:30+01:00");
          opts.search = "search_example";
          opts.addressBookCode = "addressBookCode_example";
          opts.invoiceCode = "invoiceCode_example";

          instance.invoiceListScheduleCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(_.ListCountViewModel);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoicePdf', function() {
        it('should call invoicePdf successfully', function(done) {
          // TODO: uncomment, update parameter values for invoicePdf call and complete the assertions
          /*
          var code = "code_example";

          instance.invoicePdf(code, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(_.InvoicePdfResponseViewModel);
            expect(data.success).to.be.a('boolean');
            expect(data.success).to.be(false);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.fileAddress).to.be.a('string');
            expect(data.fileAddress).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoicePost', function() {
        it('should call invoicePost successfully', function(done) {
          // TODO: uncomment, update parameter values for invoicePost call and complete the assertions
          /*
          var opts = {};
          opts.value = new _.InvoiceCreateViewModel();
          opts.value.ccToes = [new _.InvoiceCcToCreateOrUpdateViewModel()];
          opts.value.ccToes[0].emailAddress = "";
          opts.value.billToes = [new _.InvoiceBillToCreateOrUpdateViewModel()];
          opts.value.billToes[0].addressBookCode = "";
          opts.value.createStatus = 0;
          opts.value.paidManualDescription = "";
          opts.value.saveToTemplate = false;
          opts.value.templateCode = "";
          opts.value.invoiceNumber = "0";
          opts.value.invoiceTitle = "";
          opts.value.invoiceDateTime = new Date();
          opts.value.dueDate = new Date();
          opts.value.totalDiscountValue = 0.0;
          opts.value.totalDiscountType = 0;
          opts.value.shipping = 0.0;
          opts.value.notes = "";
          opts.value.termsAndConditions = "";
          opts.value.memo = "";
          opts.value.invoiceItems = [new _.InvoiceItemCreateViewModel()];
          opts.value.invoiceItems[0].code = "";
          opts.value.invoiceItems[0].name = "";
          opts.value.invoiceItems[0].description = "";
          opts.value.invoiceItems[0].tax = false;
          opts.value.invoiceItems[0].quantity = 0;
          opts.value.invoiceItems[0].discountValue = 0.0;
          opts.value.invoiceItems[0].discountType = 0;
          opts.value.invoiceItems[0].discountCouponCode = "";
          opts.value.invoiceItems[0].price = 0.0;
          opts.value.isSendAttachmentsAfterPayment = false;
          opts.value.isSendNotesAndTermsAfterPayment = false;
          opts.value.isSendTermsAfterPayment = false;
          opts.value.attachmentsIds = [""];
          opts.value.isDevicePayment = false;

          instance.invoicePost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(_.InvoiceDetailViewModel);
              expect(data.code).to.be.a('string');
              expect(data.code).to.be("");
              expect(data.parentCode).to.be.a('string');
              expect(data.parentCode).to.be("");
              expect(data.paymentCode).to.be.a('string');
              expect(data.paymentCode).to.be("");
              {
                let dataCtr = data.ccToes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(_.InvoiceCcToDetailViewModel);
                  expect(data.emailAddress).to.be.a('string');
                  expect(data.emailAddress).to.be("");
  
                        }
              }
              {
                let dataCtr = data.billToes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(_.InvoiceBillToDetailViewModel);
                  expect(data.addressBook).to.be.a(_.AddressBookDetailViewModel);
                        expect(data.addressBook.code).to.be.a('string');
                    expect(data.addressBook.code).to.be("");
                    expect(data.addressBook.userPhotoFileAddress).to.be.a('string');
                    expect(data.addressBook.userPhotoFileAddress).to.be("");
                    expect(data.addressBook.userPhotoFileId).to.be.a('string');
                    expect(data.addressBook.userPhotoFileId).to.be("");
                    expect(data.addressBook.email).to.be.a('string');
                    expect(data.addressBook.email).to.be("info@example.com");
                    expect(data.addressBook.phone).to.be.a('string');
                    expect(data.addressBook.phone).to.be("09110000000");
                    expect(data.addressBook.firstName).to.be.a('string');
                    expect(data.addressBook.firstName).to.be("پوریا");
                    expect(data.addressBook.lastName).to.be.a('string');
                    expect(data.addressBook.lastName).to.be("منفرد");
                    expect(data.addressBook.businessName).to.be.a('string');
                    expect(data.addressBook.businessName).to.be("پی پینگ");
                    expect(data.addressBook.additionalInfo).to.be.a('string');
                    expect(data.addressBook.additionalInfo).to.be("او یک وکیل است");
                    expect(data.addressBook.memo).to.be.a('string');
                    expect(data.addressBook.memo).to.be("در پی پینگ با ایشان آشنا شدم");
                    expect(data.addressBook.zipCode).to.be.a('string');
                    expect(data.addressBook.zipCode).to.be("46169696164");
                    expect(data.addressBook.state).to.be.a('string');
                    expect(data.addressBook.state).to.be("تهران");
                    expect(data.addressBook.city).to.be.a('string');
                    expect(data.addressBook.city).to.be("تهران");
                    expect(data.addressBook.location).to.be.a('string');
                    expect(data.addressBook.location).to.be("خیابان جمهوری");
                    expect(data.addressBook.isBusiness).to.be.a('boolean');
                    expect(data.addressBook.isBusiness).to.be(false);
                    expect(data.addressBook.nationalId).to.be.a('string');
                    expect(data.addressBook.nationalId).to.be("22266655591");
  
                        }
              }
              expect(data.status).to.be.a('number');
              expect(data.status).to.be(0);
              expect(data.paidManualDescription).to.be.a('string');
              expect(data.paidManualDescription).to.be("");
              expect(data.saveToTemplate).to.be.a('boolean');
              expect(data.saveToTemplate).to.be(false);
              expect(data.invoiceNumber).to.be.a('number');
              expect(data.invoiceNumber).to.be("0");
              expect(data.invoiceTitle).to.be.a('string');
              expect(data.invoiceTitle).to.be("");
              expect(data.invoiceDateTime).to.be.a(Date);
              expect(data.invoiceDateTime).to.be(new Date());
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.payedDateTime).to.be.a(Date);
              expect(data.payedDateTime).to.be(new Date());
              expect(data.canceledDateTime).to.be.a(Date);
              expect(data.canceledDateTime).to.be(new Date());
              expect(data.subTotal).to.be.a('number');
              expect(data.subTotal).to.be(0.0);
              expect(data.itemsDiscountAmount).to.be.a('number');
              expect(data.itemsDiscountAmount).to.be(0.0);
              expect(data.totalDiscountAmount).to.be.a('number');
              expect(data.totalDiscountAmount).to.be(0.0);
              expect(data.totalDiscountPercent).to.be.a('number');
              expect(data.totalDiscountPercent).to.be(0);
              expect(data.totalDiscountType).to.be.a('number');
              expect(data.totalDiscountType).to.be(0);
              expect(data.sumDiscountAmount).to.be.a('number');
              expect(data.sumDiscountAmount).to.be(0.0);
              expect(data.totalTaxtionAmount).to.be.a('number');
              expect(data.totalTaxtionAmount).to.be(0.0);
              expect(data.shipping).to.be.a('number');
              expect(data.shipping).to.be(0.0);
              expect(data.total).to.be.a('number');
              expect(data.total).to.be(0.0);
              expect(data.notes).to.be.a('string');
              expect(data.notes).to.be("");
              expect(data.termsAndConditions).to.be.a('string');
              expect(data.termsAndConditions).to.be("");
              expect(data.memo).to.be.a('string');
              expect(data.memo).to.be("");
              expect(data.invoiceSchulder).to.be.a(_.InvoiceSchulderDetailViewModel);
                    expect(data.invoiceSchulder.repeat).to.be.a('number');
                expect(data.invoiceSchulder.repeat).to.be(0);
                expect(data.invoiceSchulder.schulderType).to.be.a('number');
                expect(data.invoiceSchulder.schulderType).to.be(0);
                expect(data.invoiceSchulder.dueType).to.be.a('number');
                expect(data.invoiceSchulder.dueType).to.be(0);
                expect(data.invoiceSchulder.endValue).to.be.a('string');
                expect(data.invoiceSchulder.endValue).to.be("");
                expect(data.invoiceSchulder.dueDateAfterHowManyDay).to.be.a('number');
                expect(data.invoiceSchulder.dueDateAfterHowManyDay).to.be(0);
                {
                  let dataCtr = data.invoiceSchulder.invoiceSubSchulders;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(_.InvoiceSubSchulderDetailViewModel);
                    expect(data.dueDate).to.be.a(Date);
                    expect(data.dueDate).to.be(new Date());
                    expect(data.mustBeCreateInDateTime).to.be.a(Date);
                    expect(data.mustBeCreateInDateTime).to.be(new Date());
                    expect(data.deActiveDateTime).to.be.a(Date);
                    expect(data.deActiveDateTime).to.be(new Date());
                    expect(data.isInvoiceCreated).to.be.a('boolean');
                    expect(data.isInvoiceCreated).to.be(false);
                    expect(data.isActive).to.be.a('boolean');
                    expect(data.isActive).to.be(false);
                    expect(data.invoiceCode).to.be.a('string');
                    expect(data.invoiceCode).to.be("");
    
                          }
                }
              {
                let dataCtr = data.invoiceItems;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(_.InvoiceItemDetailViewModel);
                  expect(data.code).to.be.a('string');
                  expect(data.code).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.quantity).to.be.a('number');
                  expect(data.quantity).to.be(0);
                  expect(data.discountType).to.be.a('number');
                  expect(data.discountType).to.be(0);
                  expect(data.discountPercent).to.be.a('number');
                  expect(data.discountPercent).to.be(0);
                  expect(data.discountAmount).to.be.a('number');
                  expect(data.discountAmount).to.be(0.0);
                  expect(data.tax).to.be.a('boolean');
                  expect(data.tax).to.be(false);
                  expect(data.taxRate).to.be.a('number');
                  expect(data.taxRate).to.be(0);
                  expect(data.price).to.be.a('number');
                  expect(data.price).to.be(0.0);
                  expect(data.totalPrice).to.be.a('number');
                  expect(data.totalPrice).to.be(0.0);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0.0);
  
                        }
              }
              expect(data.isSendAttachmentsAfterPayment).to.be.a('boolean');
              expect(data.isSendAttachmentsAfterPayment).to.be(false);
              expect(data.isSendNotesAndTermsAfterPayment).to.be.a('boolean');
              expect(data.isSendNotesAndTermsAfterPayment).to.be(false);
              expect(data.isSendTermsAfterPayment).to.be.a('boolean');
              expect(data.isSendTermsAfterPayment).to.be(false);
              {
                let dataCtr = data.attachFileIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.attachFileAddresses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.qrCodeFileName).to.be.a('string');
              expect(data.qrCodeFileName).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoicePut', function() {
        it('should call invoicePut successfully', function(done) {
          // TODO: uncomment, update parameter values for invoicePut call and complete the assertions
          /*
          var code = "code_example";
          var opts = {};
          opts.value = new _.InvoiceEditViewModel();
          opts.value.code = "";
          opts.value.ccToes = [new _.InvoiceCcToCreateOrUpdateViewModel()];
          opts.value.ccToes[0].emailAddress = "";
          opts.value.billToes = [new _.InvoiceBillToCreateOrUpdateViewModel()];
          opts.value.billToes[0].addressBookCode = "";
          opts.value.createStatus = 0;
          opts.value.paidManualDescription = "";
          opts.value.saveToTemplate = false;
          opts.value.templateCode = "";
          opts.value.invoiceNumber = "0";
          opts.value.invoiceTitle = "";
          opts.value.invoiceDateTime = new Date();
          opts.value.dueDate = new Date();
          opts.value.totalDiscountValue = 0.0;
          opts.value.totalDiscountType = 0;
          opts.value.shipping = 0.0;
          opts.value.notes = "";
          opts.value.termsAndConditions = "";
          opts.value.memo = "";
          opts.value.invoiceItems = [new _.InvoiceItemCreateViewModel()];
          opts.value.invoiceItems[0].code = "";
          opts.value.invoiceItems[0].name = "";
          opts.value.invoiceItems[0].description = "";
          opts.value.invoiceItems[0].tax = false;
          opts.value.invoiceItems[0].quantity = 0;
          opts.value.invoiceItems[0].discountValue = 0.0;
          opts.value.invoiceItems[0].discountType = 0;
          opts.value.invoiceItems[0].discountCouponCode = "";
          opts.value.invoiceItems[0].price = 0.0;
          opts.value.isSendAttachmentsAfterPayment = false;
          opts.value.isSendNotesAndTermsAfterPayment = false;
          opts.value.isSendTermsAfterPayment = false;
          opts.value.attachmentsIds = [""];
          opts.value.isDevicePayment = false;

          instance.invoicePut(code, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(_.InvoiceDetailViewModel);
            expect(data.code).to.be.a('string');
            expect(data.code).to.be("");
            expect(data.parentCode).to.be.a('string');
            expect(data.parentCode).to.be("");
            expect(data.paymentCode).to.be.a('string');
            expect(data.paymentCode).to.be("");
            {
              let dataCtr = data.ccToes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(_.InvoiceCcToDetailViewModel);
                expect(data.emailAddress).to.be.a('string');
                expect(data.emailAddress).to.be("");

                      }
            }
            {
              let dataCtr = data.billToes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(_.InvoiceBillToDetailViewModel);
                expect(data.addressBook).to.be.a(_.AddressBookDetailViewModel);
                      expect(data.addressBook.code).to.be.a('string');
                  expect(data.addressBook.code).to.be("");
                  expect(data.addressBook.userPhotoFileAddress).to.be.a('string');
                  expect(data.addressBook.userPhotoFileAddress).to.be("");
                  expect(data.addressBook.userPhotoFileId).to.be.a('string');
                  expect(data.addressBook.userPhotoFileId).to.be("");
                  expect(data.addressBook.email).to.be.a('string');
                  expect(data.addressBook.email).to.be("info@example.com");
                  expect(data.addressBook.phone).to.be.a('string');
                  expect(data.addressBook.phone).to.be("09110000000");
                  expect(data.addressBook.firstName).to.be.a('string');
                  expect(data.addressBook.firstName).to.be("پوریا");
                  expect(data.addressBook.lastName).to.be.a('string');
                  expect(data.addressBook.lastName).to.be("منفرد");
                  expect(data.addressBook.businessName).to.be.a('string');
                  expect(data.addressBook.businessName).to.be("پی پینگ");
                  expect(data.addressBook.additionalInfo).to.be.a('string');
                  expect(data.addressBook.additionalInfo).to.be("او یک وکیل است");
                  expect(data.addressBook.memo).to.be.a('string');
                  expect(data.addressBook.memo).to.be("در پی پینگ با ایشان آشنا شدم");
                  expect(data.addressBook.zipCode).to.be.a('string');
                  expect(data.addressBook.zipCode).to.be("46169696164");
                  expect(data.addressBook.state).to.be.a('string');
                  expect(data.addressBook.state).to.be("تهران");
                  expect(data.addressBook.city).to.be.a('string');
                  expect(data.addressBook.city).to.be("تهران");
                  expect(data.addressBook.location).to.be.a('string');
                  expect(data.addressBook.location).to.be("خیابان جمهوری");
                  expect(data.addressBook.isBusiness).to.be.a('boolean');
                  expect(data.addressBook.isBusiness).to.be(false);
                  expect(data.addressBook.nationalId).to.be.a('string');
                  expect(data.addressBook.nationalId).to.be("22266655591");

                      }
            }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(0);
            expect(data.paidManualDescription).to.be.a('string');
            expect(data.paidManualDescription).to.be("");
            expect(data.saveToTemplate).to.be.a('boolean');
            expect(data.saveToTemplate).to.be(false);
            expect(data.invoiceNumber).to.be.a('number');
            expect(data.invoiceNumber).to.be("0");
            expect(data.invoiceTitle).to.be.a('string');
            expect(data.invoiceTitle).to.be("");
            expect(data.invoiceDateTime).to.be.a(Date);
            expect(data.invoiceDateTime).to.be(new Date());
            expect(data.dueDate).to.be.a(Date);
            expect(data.dueDate).to.be(new Date());
            expect(data.payedDateTime).to.be.a(Date);
            expect(data.payedDateTime).to.be(new Date());
            expect(data.canceledDateTime).to.be.a(Date);
            expect(data.canceledDateTime).to.be(new Date());
            expect(data.subTotal).to.be.a('number');
            expect(data.subTotal).to.be(0.0);
            expect(data.itemsDiscountAmount).to.be.a('number');
            expect(data.itemsDiscountAmount).to.be(0.0);
            expect(data.totalDiscountAmount).to.be.a('number');
            expect(data.totalDiscountAmount).to.be(0.0);
            expect(data.totalDiscountPercent).to.be.a('number');
            expect(data.totalDiscountPercent).to.be(0);
            expect(data.totalDiscountType).to.be.a('number');
            expect(data.totalDiscountType).to.be(0);
            expect(data.sumDiscountAmount).to.be.a('number');
            expect(data.sumDiscountAmount).to.be(0.0);
            expect(data.totalTaxtionAmount).to.be.a('number');
            expect(data.totalTaxtionAmount).to.be(0.0);
            expect(data.shipping).to.be.a('number');
            expect(data.shipping).to.be(0.0);
            expect(data.total).to.be.a('number');
            expect(data.total).to.be(0.0);
            expect(data.notes).to.be.a('string');
            expect(data.notes).to.be("");
            expect(data.termsAndConditions).to.be.a('string');
            expect(data.termsAndConditions).to.be("");
            expect(data.memo).to.be.a('string');
            expect(data.memo).to.be("");
            expect(data.invoiceSchulder).to.be.a(_.InvoiceSchulderDetailViewModel);
                  expect(data.invoiceSchulder.repeat).to.be.a('number');
              expect(data.invoiceSchulder.repeat).to.be(0);
              expect(data.invoiceSchulder.schulderType).to.be.a('number');
              expect(data.invoiceSchulder.schulderType).to.be(0);
              expect(data.invoiceSchulder.dueType).to.be.a('number');
              expect(data.invoiceSchulder.dueType).to.be(0);
              expect(data.invoiceSchulder.endValue).to.be.a('string');
              expect(data.invoiceSchulder.endValue).to.be("");
              expect(data.invoiceSchulder.dueDateAfterHowManyDay).to.be.a('number');
              expect(data.invoiceSchulder.dueDateAfterHowManyDay).to.be(0);
              {
                let dataCtr = data.invoiceSchulder.invoiceSubSchulders;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(_.InvoiceSubSchulderDetailViewModel);
                  expect(data.dueDate).to.be.a(Date);
                  expect(data.dueDate).to.be(new Date());
                  expect(data.mustBeCreateInDateTime).to.be.a(Date);
                  expect(data.mustBeCreateInDateTime).to.be(new Date());
                  expect(data.deActiveDateTime).to.be.a(Date);
                  expect(data.deActiveDateTime).to.be(new Date());
                  expect(data.isInvoiceCreated).to.be.a('boolean');
                  expect(data.isInvoiceCreated).to.be(false);
                  expect(data.isActive).to.be.a('boolean');
                  expect(data.isActive).to.be(false);
                  expect(data.invoiceCode).to.be.a('string');
                  expect(data.invoiceCode).to.be("");
  
                        }
              }
            {
              let dataCtr = data.invoiceItems;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(_.InvoiceItemDetailViewModel);
                expect(data.code).to.be.a('string');
                expect(data.code).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0);
                expect(data.discountType).to.be.a('number');
                expect(data.discountType).to.be(0);
                expect(data.discountPercent).to.be.a('number');
                expect(data.discountPercent).to.be(0);
                expect(data.discountAmount).to.be.a('number');
                expect(data.discountAmount).to.be(0.0);
                expect(data.tax).to.be.a('boolean');
                expect(data.tax).to.be(false);
                expect(data.taxRate).to.be.a('number');
                expect(data.taxRate).to.be(0);
                expect(data.price).to.be.a('number');
                expect(data.price).to.be(0.0);
                expect(data.totalPrice).to.be.a('number');
                expect(data.totalPrice).to.be(0.0);
                expect(data.amount).to.be.a('number');
                expect(data.amount).to.be(0.0);

                      }
            }
            expect(data.isSendAttachmentsAfterPayment).to.be.a('boolean');
            expect(data.isSendAttachmentsAfterPayment).to.be(false);
            expect(data.isSendNotesAndTermsAfterPayment).to.be.a('boolean');
            expect(data.isSendNotesAndTermsAfterPayment).to.be(false);
            expect(data.isSendTermsAfterPayment).to.be.a('boolean');
            expect(data.isSendTermsAfterPayment).to.be(false);
            {
              let dataCtr = data.attachFileIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.attachFileAddresses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.qrCodeFileName).to.be.a('string');
            expect(data.qrCodeFileName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceReminder', function() {
        it('should call invoiceReminder successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceReminder call and complete the assertions
          /*
          var code = "code_example";

          instance.invoiceReminder(code, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(_.InvoiceSendReminderResponseViewModel);
            expect(data.success).to.be.a('boolean');
            expect(data.success).to.be(false);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.modelCode).to.be.a('string');
            expect(data.modelCode).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceScheduleGet', function() {
        it('should call invoiceScheduleGet successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceScheduleGet call and complete the assertions
          /*
          var code = "code_example";

          instance.invoiceScheduleGet(code, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(_.ScheduleInvoiceWithChilds);
            expect(data.parentInvoice).to.be.a(_.InvoiceDetailViewModel);
                  expect(data.parentInvoice.code).to.be.a('string');
              expect(data.parentInvoice.code).to.be("");
              expect(data.parentInvoice.parentCode).to.be.a('string');
              expect(data.parentInvoice.parentCode).to.be("");
              expect(data.parentInvoice.paymentCode).to.be.a('string');
              expect(data.parentInvoice.paymentCode).to.be("");
              {
                let dataCtr = data.parentInvoice.ccToes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(_.InvoiceCcToDetailViewModel);
                  expect(data.emailAddress).to.be.a('string');
                  expect(data.emailAddress).to.be("");
  
                        }
              }
              {
                let dataCtr = data.parentInvoice.billToes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(_.InvoiceBillToDetailViewModel);
                  expect(data.addressBook).to.be.a(_.AddressBookDetailViewModel);
                        expect(data.addressBook.code).to.be.a('string');
                    expect(data.addressBook.code).to.be("");
                    expect(data.addressBook.userPhotoFileAddress).to.be.a('string');
                    expect(data.addressBook.userPhotoFileAddress).to.be("");
                    expect(data.addressBook.userPhotoFileId).to.be.a('string');
                    expect(data.addressBook.userPhotoFileId).to.be("");
                    expect(data.addressBook.email).to.be.a('string');
                    expect(data.addressBook.email).to.be("info@example.com");
                    expect(data.addressBook.phone).to.be.a('string');
                    expect(data.addressBook.phone).to.be("09110000000");
                    expect(data.addressBook.firstName).to.be.a('string');
                    expect(data.addressBook.firstName).to.be("پوریا");
                    expect(data.addressBook.lastName).to.be.a('string');
                    expect(data.addressBook.lastName).to.be("منفرد");
                    expect(data.addressBook.businessName).to.be.a('string');
                    expect(data.addressBook.businessName).to.be("پی پینگ");
                    expect(data.addressBook.additionalInfo).to.be.a('string');
                    expect(data.addressBook.additionalInfo).to.be("او یک وکیل است");
                    expect(data.addressBook.memo).to.be.a('string');
                    expect(data.addressBook.memo).to.be("در پی پینگ با ایشان آشنا شدم");
                    expect(data.addressBook.zipCode).to.be.a('string');
                    expect(data.addressBook.zipCode).to.be("46169696164");
                    expect(data.addressBook.state).to.be.a('string');
                    expect(data.addressBook.state).to.be("تهران");
                    expect(data.addressBook.city).to.be.a('string');
                    expect(data.addressBook.city).to.be("تهران");
                    expect(data.addressBook.location).to.be.a('string');
                    expect(data.addressBook.location).to.be("خیابان جمهوری");
                    expect(data.addressBook.isBusiness).to.be.a('boolean');
                    expect(data.addressBook.isBusiness).to.be(false);
                    expect(data.addressBook.nationalId).to.be.a('string');
                    expect(data.addressBook.nationalId).to.be("22266655591");
  
                        }
              }
              expect(data.parentInvoice.status).to.be.a('number');
              expect(data.parentInvoice.status).to.be(0);
              expect(data.parentInvoice.paidManualDescription).to.be.a('string');
              expect(data.parentInvoice.paidManualDescription).to.be("");
              expect(data.parentInvoice.saveToTemplate).to.be.a('boolean');
              expect(data.parentInvoice.saveToTemplate).to.be(false);
              expect(data.parentInvoice.invoiceNumber).to.be.a('number');
              expect(data.parentInvoice.invoiceNumber).to.be("0");
              expect(data.parentInvoice.invoiceTitle).to.be.a('string');
              expect(data.parentInvoice.invoiceTitle).to.be("");
              expect(data.parentInvoice.invoiceDateTime).to.be.a(Date);
              expect(data.parentInvoice.invoiceDateTime).to.be(new Date());
              expect(data.parentInvoice.dueDate).to.be.a(Date);
              expect(data.parentInvoice.dueDate).to.be(new Date());
              expect(data.parentInvoice.payedDateTime).to.be.a(Date);
              expect(data.parentInvoice.payedDateTime).to.be(new Date());
              expect(data.parentInvoice.canceledDateTime).to.be.a(Date);
              expect(data.parentInvoice.canceledDateTime).to.be(new Date());
              expect(data.parentInvoice.subTotal).to.be.a('number');
              expect(data.parentInvoice.subTotal).to.be(0.0);
              expect(data.parentInvoice.itemsDiscountAmount).to.be.a('number');
              expect(data.parentInvoice.itemsDiscountAmount).to.be(0.0);
              expect(data.parentInvoice.totalDiscountAmount).to.be.a('number');
              expect(data.parentInvoice.totalDiscountAmount).to.be(0.0);
              expect(data.parentInvoice.totalDiscountPercent).to.be.a('number');
              expect(data.parentInvoice.totalDiscountPercent).to.be(0);
              expect(data.parentInvoice.totalDiscountType).to.be.a('number');
              expect(data.parentInvoice.totalDiscountType).to.be(0);
              expect(data.parentInvoice.sumDiscountAmount).to.be.a('number');
              expect(data.parentInvoice.sumDiscountAmount).to.be(0.0);
              expect(data.parentInvoice.totalTaxtionAmount).to.be.a('number');
              expect(data.parentInvoice.totalTaxtionAmount).to.be(0.0);
              expect(data.parentInvoice.shipping).to.be.a('number');
              expect(data.parentInvoice.shipping).to.be(0.0);
              expect(data.parentInvoice.total).to.be.a('number');
              expect(data.parentInvoice.total).to.be(0.0);
              expect(data.parentInvoice.notes).to.be.a('string');
              expect(data.parentInvoice.notes).to.be("");
              expect(data.parentInvoice.termsAndConditions).to.be.a('string');
              expect(data.parentInvoice.termsAndConditions).to.be("");
              expect(data.parentInvoice.memo).to.be.a('string');
              expect(data.parentInvoice.memo).to.be("");
              expect(data.parentInvoice.invoiceSchulder).to.be.a(_.InvoiceSchulderDetailViewModel);
                    expect(data.parentInvoice.invoiceSchulder.repeat).to.be.a('number');
                expect(data.parentInvoice.invoiceSchulder.repeat).to.be(0);
                expect(data.parentInvoice.invoiceSchulder.schulderType).to.be.a('number');
                expect(data.parentInvoice.invoiceSchulder.schulderType).to.be(0);
                expect(data.parentInvoice.invoiceSchulder.dueType).to.be.a('number');
                expect(data.parentInvoice.invoiceSchulder.dueType).to.be(0);
                expect(data.parentInvoice.invoiceSchulder.endValue).to.be.a('string');
                expect(data.parentInvoice.invoiceSchulder.endValue).to.be("");
                expect(data.parentInvoice.invoiceSchulder.dueDateAfterHowManyDay).to.be.a('number');
                expect(data.parentInvoice.invoiceSchulder.dueDateAfterHowManyDay).to.be(0);
                {
                  let dataCtr = data.parentInvoice.invoiceSchulder.invoiceSubSchulders;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(_.InvoiceSubSchulderDetailViewModel);
                    expect(data.dueDate).to.be.a(Date);
                    expect(data.dueDate).to.be(new Date());
                    expect(data.mustBeCreateInDateTime).to.be.a(Date);
                    expect(data.mustBeCreateInDateTime).to.be(new Date());
                    expect(data.deActiveDateTime).to.be.a(Date);
                    expect(data.deActiveDateTime).to.be(new Date());
                    expect(data.isInvoiceCreated).to.be.a('boolean');
                    expect(data.isInvoiceCreated).to.be(false);
                    expect(data.isActive).to.be.a('boolean');
                    expect(data.isActive).to.be(false);
                    expect(data.invoiceCode).to.be.a('string');
                    expect(data.invoiceCode).to.be("");
    
                          }
                }
              {
                let dataCtr = data.parentInvoice.invoiceItems;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(_.InvoiceItemDetailViewModel);
                  expect(data.code).to.be.a('string');
                  expect(data.code).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.quantity).to.be.a('number');
                  expect(data.quantity).to.be(0);
                  expect(data.discountType).to.be.a('number');
                  expect(data.discountType).to.be(0);
                  expect(data.discountPercent).to.be.a('number');
                  expect(data.discountPercent).to.be(0);
                  expect(data.discountAmount).to.be.a('number');
                  expect(data.discountAmount).to.be(0.0);
                  expect(data.tax).to.be.a('boolean');
                  expect(data.tax).to.be(false);
                  expect(data.taxRate).to.be.a('number');
                  expect(data.taxRate).to.be(0);
                  expect(data.price).to.be.a('number');
                  expect(data.price).to.be(0.0);
                  expect(data.totalPrice).to.be.a('number');
                  expect(data.totalPrice).to.be(0.0);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0.0);
  
                        }
              }
              expect(data.parentInvoice.isSendAttachmentsAfterPayment).to.be.a('boolean');
              expect(data.parentInvoice.isSendAttachmentsAfterPayment).to.be(false);
              expect(data.parentInvoice.isSendNotesAndTermsAfterPayment).to.be.a('boolean');
              expect(data.parentInvoice.isSendNotesAndTermsAfterPayment).to.be(false);
              expect(data.parentInvoice.isSendTermsAfterPayment).to.be.a('boolean');
              expect(data.parentInvoice.isSendTermsAfterPayment).to.be(false);
              {
                let dataCtr = data.parentInvoice.attachFileIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.parentInvoice.attachFileAddresses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.parentInvoice.qrCodeFileName).to.be.a('string');
              expect(data.parentInvoice.qrCodeFileName).to.be("");
            {
              let dataCtr = data.childInvoices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(_.InvoiceDetailViewModel);
                expect(data.code).to.be.a('string');
                expect(data.code).to.be("");
                expect(data.parentCode).to.be.a('string');
                expect(data.parentCode).to.be("");
                expect(data.paymentCode).to.be.a('string');
                expect(data.paymentCode).to.be("");
                {
                  let dataCtr = data.ccToes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(_.InvoiceCcToDetailViewModel);
                    expect(data.emailAddress).to.be.a('string');
                    expect(data.emailAddress).to.be("");
    
                          }
                }
                {
                  let dataCtr = data.billToes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(_.InvoiceBillToDetailViewModel);
                    expect(data.addressBook).to.be.a(_.AddressBookDetailViewModel);
                          expect(data.addressBook.code).to.be.a('string');
                      expect(data.addressBook.code).to.be("");
                      expect(data.addressBook.userPhotoFileAddress).to.be.a('string');
                      expect(data.addressBook.userPhotoFileAddress).to.be("");
                      expect(data.addressBook.userPhotoFileId).to.be.a('string');
                      expect(data.addressBook.userPhotoFileId).to.be("");
                      expect(data.addressBook.email).to.be.a('string');
                      expect(data.addressBook.email).to.be("info@example.com");
                      expect(data.addressBook.phone).to.be.a('string');
                      expect(data.addressBook.phone).to.be("09110000000");
                      expect(data.addressBook.firstName).to.be.a('string');
                      expect(data.addressBook.firstName).to.be("پوریا");
                      expect(data.addressBook.lastName).to.be.a('string');
                      expect(data.addressBook.lastName).to.be("منفرد");
                      expect(data.addressBook.businessName).to.be.a('string');
                      expect(data.addressBook.businessName).to.be("پی پینگ");
                      expect(data.addressBook.additionalInfo).to.be.a('string');
                      expect(data.addressBook.additionalInfo).to.be("او یک وکیل است");
                      expect(data.addressBook.memo).to.be.a('string');
                      expect(data.addressBook.memo).to.be("در پی پینگ با ایشان آشنا شدم");
                      expect(data.addressBook.zipCode).to.be.a('string');
                      expect(data.addressBook.zipCode).to.be("46169696164");
                      expect(data.addressBook.state).to.be.a('string');
                      expect(data.addressBook.state).to.be("تهران");
                      expect(data.addressBook.city).to.be.a('string');
                      expect(data.addressBook.city).to.be("تهران");
                      expect(data.addressBook.location).to.be.a('string');
                      expect(data.addressBook.location).to.be("خیابان جمهوری");
                      expect(data.addressBook.isBusiness).to.be.a('boolean');
                      expect(data.addressBook.isBusiness).to.be(false);
                      expect(data.addressBook.nationalId).to.be.a('string');
                      expect(data.addressBook.nationalId).to.be("22266655591");
    
                          }
                }
                expect(data.status).to.be.a('number');
                expect(data.status).to.be(0);
                expect(data.paidManualDescription).to.be.a('string');
                expect(data.paidManualDescription).to.be("");
                expect(data.saveToTemplate).to.be.a('boolean');
                expect(data.saveToTemplate).to.be(false);
                expect(data.invoiceNumber).to.be.a('number');
                expect(data.invoiceNumber).to.be("0");
                expect(data.invoiceTitle).to.be.a('string');
                expect(data.invoiceTitle).to.be("");
                expect(data.invoiceDateTime).to.be.a(Date);
                expect(data.invoiceDateTime).to.be(new Date());
                expect(data.dueDate).to.be.a(Date);
                expect(data.dueDate).to.be(new Date());
                expect(data.payedDateTime).to.be.a(Date);
                expect(data.payedDateTime).to.be(new Date());
                expect(data.canceledDateTime).to.be.a(Date);
                expect(data.canceledDateTime).to.be(new Date());
                expect(data.subTotal).to.be.a('number');
                expect(data.subTotal).to.be(0.0);
                expect(data.itemsDiscountAmount).to.be.a('number');
                expect(data.itemsDiscountAmount).to.be(0.0);
                expect(data.totalDiscountAmount).to.be.a('number');
                expect(data.totalDiscountAmount).to.be(0.0);
                expect(data.totalDiscountPercent).to.be.a('number');
                expect(data.totalDiscountPercent).to.be(0);
                expect(data.totalDiscountType).to.be.a('number');
                expect(data.totalDiscountType).to.be(0);
                expect(data.sumDiscountAmount).to.be.a('number');
                expect(data.sumDiscountAmount).to.be(0.0);
                expect(data.totalTaxtionAmount).to.be.a('number');
                expect(data.totalTaxtionAmount).to.be(0.0);
                expect(data.shipping).to.be.a('number');
                expect(data.shipping).to.be(0.0);
                expect(data.total).to.be.a('number');
                expect(data.total).to.be(0.0);
                expect(data.notes).to.be.a('string');
                expect(data.notes).to.be("");
                expect(data.termsAndConditions).to.be.a('string');
                expect(data.termsAndConditions).to.be("");
                expect(data.memo).to.be.a('string');
                expect(data.memo).to.be("");
                expect(data.invoiceSchulder).to.be.a(_.InvoiceSchulderDetailViewModel);
                      expect(data.invoiceSchulder.repeat).to.be.a('number');
                  expect(data.invoiceSchulder.repeat).to.be(0);
                  expect(data.invoiceSchulder.schulderType).to.be.a('number');
                  expect(data.invoiceSchulder.schulderType).to.be(0);
                  expect(data.invoiceSchulder.dueType).to.be.a('number');
                  expect(data.invoiceSchulder.dueType).to.be(0);
                  expect(data.invoiceSchulder.endValue).to.be.a('string');
                  expect(data.invoiceSchulder.endValue).to.be("");
                  expect(data.invoiceSchulder.dueDateAfterHowManyDay).to.be.a('number');
                  expect(data.invoiceSchulder.dueDateAfterHowManyDay).to.be(0);
                  {
                    let dataCtr = data.invoiceSchulder.invoiceSubSchulders;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(_.InvoiceSubSchulderDetailViewModel);
                      expect(data.dueDate).to.be.a(Date);
                      expect(data.dueDate).to.be(new Date());
                      expect(data.mustBeCreateInDateTime).to.be.a(Date);
                      expect(data.mustBeCreateInDateTime).to.be(new Date());
                      expect(data.deActiveDateTime).to.be.a(Date);
                      expect(data.deActiveDateTime).to.be(new Date());
                      expect(data.isInvoiceCreated).to.be.a('boolean');
                      expect(data.isInvoiceCreated).to.be(false);
                      expect(data.isActive).to.be.a('boolean');
                      expect(data.isActive).to.be(false);
                      expect(data.invoiceCode).to.be.a('string');
                      expect(data.invoiceCode).to.be("");
      
                            }
                  }
                {
                  let dataCtr = data.invoiceItems;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(_.InvoiceItemDetailViewModel);
                    expect(data.code).to.be.a('string');
                    expect(data.code).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.quantity).to.be.a('number');
                    expect(data.quantity).to.be(0);
                    expect(data.discountType).to.be.a('number');
                    expect(data.discountType).to.be(0);
                    expect(data.discountPercent).to.be.a('number');
                    expect(data.discountPercent).to.be(0);
                    expect(data.discountAmount).to.be.a('number');
                    expect(data.discountAmount).to.be(0.0);
                    expect(data.tax).to.be.a('boolean');
                    expect(data.tax).to.be(false);
                    expect(data.taxRate).to.be.a('number');
                    expect(data.taxRate).to.be(0);
                    expect(data.price).to.be.a('number');
                    expect(data.price).to.be(0.0);
                    expect(data.totalPrice).to.be.a('number');
                    expect(data.totalPrice).to.be(0.0);
                    expect(data.amount).to.be.a('number');
                    expect(data.amount).to.be(0.0);
    
                          }
                }
                expect(data.isSendAttachmentsAfterPayment).to.be.a('boolean');
                expect(data.isSendAttachmentsAfterPayment).to.be(false);
                expect(data.isSendNotesAndTermsAfterPayment).to.be.a('boolean');
                expect(data.isSendNotesAndTermsAfterPayment).to.be(false);
                expect(data.isSendTermsAfterPayment).to.be.a('boolean');
                expect(data.isSendTermsAfterPayment).to.be(false);
                {
                  let dataCtr = data.attachFileIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.attachFileAddresses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.qrCodeFileName).to.be.a('string');
                expect(data.qrCodeFileName).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceSchedulePost', function() {
        it('should call invoiceSchedulePost successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceSchedulePost call and complete the assertions
          /*
          var opts = {};
          opts.value = new _.InvoiceCreateScheduleViewModel();
          opts.value.ccToes = [new _.InvoiceCcToCreateOrUpdateViewModel()];
          opts.value.ccToes[0].emailAddress = "";
          opts.value.billToes = [new _.InvoiceBillToCreateOrUpdateViewModel()];
          opts.value.billToes[0].addressBookCode = "";
          opts.value.createStatus = 1;
          opts.value.paidManualDescription = "";
          opts.value.saveToTemplate = false;
          opts.value.templateCode = "";
          opts.value.invoiceNumber = "0";
          opts.value.invoiceTitle = "";
          opts.value.invoiceDateTime = new Date();
          opts.value.dueDate = new Date();
          opts.value.totalDiscountValue = 0.0;
          opts.value.totalDiscountType = 0;
          opts.value.shipping = 0.0;
          opts.value.notes = "";
          opts.value.termsAndConditions = "";
          opts.value.memo = "";
          opts.value.invoiceSchulder = new _.InvoiceSchulderCreateOrUpdateViewModel();
          opts.value.invoiceSchulder.repeat = 0;
          opts.value.invoiceSchulder.schulderType = 0;
          opts.value.invoiceSchulder.dueType = 0;
          opts.value.invoiceSchulder.endValue = "";
          opts.value.invoiceSchulder.dueDateAfterHowManyDay = 0;
          opts.value.invoiceItems = [new _.InvoiceItemCreateViewModel()];
          opts.value.invoiceItems[0].code = "";
          opts.value.invoiceItems[0].name = "";
          opts.value.invoiceItems[0].description = "";
          opts.value.invoiceItems[0].tax = false;
          opts.value.invoiceItems[0].quantity = 0;
          opts.value.invoiceItems[0].discountValue = 0.0;
          opts.value.invoiceItems[0].discountType = 0;
          opts.value.invoiceItems[0].discountCouponCode = "";
          opts.value.invoiceItems[0].price = 0.0;
          opts.value.isSendAttachmentsAfterPayment = false;
          opts.value.isSendNotesAndTermsAfterPayment = false;
          opts.value.isSendTermsAfterPayment = false;
          opts.value.attachmentsIds = [""];
          opts.value.isDevicePayment = false;

          instance.invoiceSchedulePost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(_.InvoiceDetailViewModel);
            expect(data.code).to.be.a('string');
            expect(data.code).to.be("");
            expect(data.parentCode).to.be.a('string');
            expect(data.parentCode).to.be("");
            expect(data.paymentCode).to.be.a('string');
            expect(data.paymentCode).to.be("");
            {
              let dataCtr = data.ccToes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(_.InvoiceCcToDetailViewModel);
                expect(data.emailAddress).to.be.a('string');
                expect(data.emailAddress).to.be("");

                      }
            }
            {
              let dataCtr = data.billToes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(_.InvoiceBillToDetailViewModel);
                expect(data.addressBook).to.be.a(_.AddressBookDetailViewModel);
                      expect(data.addressBook.code).to.be.a('string');
                  expect(data.addressBook.code).to.be("");
                  expect(data.addressBook.userPhotoFileAddress).to.be.a('string');
                  expect(data.addressBook.userPhotoFileAddress).to.be("");
                  expect(data.addressBook.userPhotoFileId).to.be.a('string');
                  expect(data.addressBook.userPhotoFileId).to.be("");
                  expect(data.addressBook.email).to.be.a('string');
                  expect(data.addressBook.email).to.be("info@example.com");
                  expect(data.addressBook.phone).to.be.a('string');
                  expect(data.addressBook.phone).to.be("09110000000");
                  expect(data.addressBook.firstName).to.be.a('string');
                  expect(data.addressBook.firstName).to.be("پوریا");
                  expect(data.addressBook.lastName).to.be.a('string');
                  expect(data.addressBook.lastName).to.be("منفرد");
                  expect(data.addressBook.businessName).to.be.a('string');
                  expect(data.addressBook.businessName).to.be("پی پینگ");
                  expect(data.addressBook.additionalInfo).to.be.a('string');
                  expect(data.addressBook.additionalInfo).to.be("او یک وکیل است");
                  expect(data.addressBook.memo).to.be.a('string');
                  expect(data.addressBook.memo).to.be("در پی پینگ با ایشان آشنا شدم");
                  expect(data.addressBook.zipCode).to.be.a('string');
                  expect(data.addressBook.zipCode).to.be("46169696164");
                  expect(data.addressBook.state).to.be.a('string');
                  expect(data.addressBook.state).to.be("تهران");
                  expect(data.addressBook.city).to.be.a('string');
                  expect(data.addressBook.city).to.be("تهران");
                  expect(data.addressBook.location).to.be.a('string');
                  expect(data.addressBook.location).to.be("خیابان جمهوری");
                  expect(data.addressBook.isBusiness).to.be.a('boolean');
                  expect(data.addressBook.isBusiness).to.be(false);
                  expect(data.addressBook.nationalId).to.be.a('string');
                  expect(data.addressBook.nationalId).to.be("22266655591");

                      }
            }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(0);
            expect(data.paidManualDescription).to.be.a('string');
            expect(data.paidManualDescription).to.be("");
            expect(data.saveToTemplate).to.be.a('boolean');
            expect(data.saveToTemplate).to.be(false);
            expect(data.invoiceNumber).to.be.a('number');
            expect(data.invoiceNumber).to.be("0");
            expect(data.invoiceTitle).to.be.a('string');
            expect(data.invoiceTitle).to.be("");
            expect(data.invoiceDateTime).to.be.a(Date);
            expect(data.invoiceDateTime).to.be(new Date());
            expect(data.dueDate).to.be.a(Date);
            expect(data.dueDate).to.be(new Date());
            expect(data.payedDateTime).to.be.a(Date);
            expect(data.payedDateTime).to.be(new Date());
            expect(data.canceledDateTime).to.be.a(Date);
            expect(data.canceledDateTime).to.be(new Date());
            expect(data.subTotal).to.be.a('number');
            expect(data.subTotal).to.be(0.0);
            expect(data.itemsDiscountAmount).to.be.a('number');
            expect(data.itemsDiscountAmount).to.be(0.0);
            expect(data.totalDiscountAmount).to.be.a('number');
            expect(data.totalDiscountAmount).to.be(0.0);
            expect(data.totalDiscountPercent).to.be.a('number');
            expect(data.totalDiscountPercent).to.be(0);
            expect(data.totalDiscountType).to.be.a('number');
            expect(data.totalDiscountType).to.be(0);
            expect(data.sumDiscountAmount).to.be.a('number');
            expect(data.sumDiscountAmount).to.be(0.0);
            expect(data.totalTaxtionAmount).to.be.a('number');
            expect(data.totalTaxtionAmount).to.be(0.0);
            expect(data.shipping).to.be.a('number');
            expect(data.shipping).to.be(0.0);
            expect(data.total).to.be.a('number');
            expect(data.total).to.be(0.0);
            expect(data.notes).to.be.a('string');
            expect(data.notes).to.be("");
            expect(data.termsAndConditions).to.be.a('string');
            expect(data.termsAndConditions).to.be("");
            expect(data.memo).to.be.a('string');
            expect(data.memo).to.be("");
            expect(data.invoiceSchulder).to.be.a(_.InvoiceSchulderDetailViewModel);
                  expect(data.invoiceSchulder.repeat).to.be.a('number');
              expect(data.invoiceSchulder.repeat).to.be(0);
              expect(data.invoiceSchulder.schulderType).to.be.a('number');
              expect(data.invoiceSchulder.schulderType).to.be(0);
              expect(data.invoiceSchulder.dueType).to.be.a('number');
              expect(data.invoiceSchulder.dueType).to.be(0);
              expect(data.invoiceSchulder.endValue).to.be.a('string');
              expect(data.invoiceSchulder.endValue).to.be("");
              expect(data.invoiceSchulder.dueDateAfterHowManyDay).to.be.a('number');
              expect(data.invoiceSchulder.dueDateAfterHowManyDay).to.be(0);
              {
                let dataCtr = data.invoiceSchulder.invoiceSubSchulders;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(_.InvoiceSubSchulderDetailViewModel);
                  expect(data.dueDate).to.be.a(Date);
                  expect(data.dueDate).to.be(new Date());
                  expect(data.mustBeCreateInDateTime).to.be.a(Date);
                  expect(data.mustBeCreateInDateTime).to.be(new Date());
                  expect(data.deActiveDateTime).to.be.a(Date);
                  expect(data.deActiveDateTime).to.be(new Date());
                  expect(data.isInvoiceCreated).to.be.a('boolean');
                  expect(data.isInvoiceCreated).to.be(false);
                  expect(data.isActive).to.be.a('boolean');
                  expect(data.isActive).to.be(false);
                  expect(data.invoiceCode).to.be.a('string');
                  expect(data.invoiceCode).to.be("");
  
                        }
              }
            {
              let dataCtr = data.invoiceItems;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(_.InvoiceItemDetailViewModel);
                expect(data.code).to.be.a('string');
                expect(data.code).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0);
                expect(data.discountType).to.be.a('number');
                expect(data.discountType).to.be(0);
                expect(data.discountPercent).to.be.a('number');
                expect(data.discountPercent).to.be(0);
                expect(data.discountAmount).to.be.a('number');
                expect(data.discountAmount).to.be(0.0);
                expect(data.tax).to.be.a('boolean');
                expect(data.tax).to.be(false);
                expect(data.taxRate).to.be.a('number');
                expect(data.taxRate).to.be(0);
                expect(data.price).to.be.a('number');
                expect(data.price).to.be(0.0);
                expect(data.totalPrice).to.be.a('number');
                expect(data.totalPrice).to.be(0.0);
                expect(data.amount).to.be.a('number');
                expect(data.amount).to.be(0.0);

                      }
            }
            expect(data.isSendAttachmentsAfterPayment).to.be.a('boolean');
            expect(data.isSendAttachmentsAfterPayment).to.be(false);
            expect(data.isSendNotesAndTermsAfterPayment).to.be.a('boolean');
            expect(data.isSendNotesAndTermsAfterPayment).to.be(false);
            expect(data.isSendTermsAfterPayment).to.be.a('boolean');
            expect(data.isSendTermsAfterPayment).to.be(false);
            {
              let dataCtr = data.attachFileIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.attachFileAddresses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.qrCodeFileName).to.be.a('string');
            expect(data.qrCodeFileName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceSend', function() {
        it('should call invoiceSend successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceSend call and complete the assertions
          /*
          var code = "code_example";

          instance.invoiceSend(code, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(_.InvoiceSendInvoiceResponseViewModel);
            expect(data.success).to.be.a('boolean');
            expect(data.success).to.be(false);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.modelCode).to.be.a('string');
            expect(data.modelCode).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceSendByTemplateAdvance', function() {
        it('should call invoiceSendByTemplateAdvance successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceSendByTemplateAdvance call and complete the assertions
          /*
          var opts = {};
          opts.value = new _.InvoiceSendByTemplate();
          opts.value.templateCode = "";
          opts.value.invoiceTitle = "";
          opts.value.invoiceNumber = "0";
          opts.value.invoiceDateTime = new Date();
          opts.value.dueDate = new Date();
          opts.value.ccToes = [new _.InvoiceCcToCreateOrUpdateViewModel()];
          opts.value.ccToes[0].emailAddress = "";
          opts.value.billToes = [new _.InvoiceBillToCreateOrUpdateViewModel()];
          opts.value.billToes[0].addressBookCode = "";
          opts.value.isDevicePayment = false;

          instance.invoiceSendByTemplateAdvance(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(_.InvoiceDetailViewModel);
              expect(data.code).to.be.a('string');
              expect(data.code).to.be("");
              expect(data.parentCode).to.be.a('string');
              expect(data.parentCode).to.be("");
              expect(data.paymentCode).to.be.a('string');
              expect(data.paymentCode).to.be("");
              {
                let dataCtr = data.ccToes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(_.InvoiceCcToDetailViewModel);
                  expect(data.emailAddress).to.be.a('string');
                  expect(data.emailAddress).to.be("");
  
                        }
              }
              {
                let dataCtr = data.billToes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(_.InvoiceBillToDetailViewModel);
                  expect(data.addressBook).to.be.a(_.AddressBookDetailViewModel);
                        expect(data.addressBook.code).to.be.a('string');
                    expect(data.addressBook.code).to.be("");
                    expect(data.addressBook.userPhotoFileAddress).to.be.a('string');
                    expect(data.addressBook.userPhotoFileAddress).to.be("");
                    expect(data.addressBook.userPhotoFileId).to.be.a('string');
                    expect(data.addressBook.userPhotoFileId).to.be("");
                    expect(data.addressBook.email).to.be.a('string');
                    expect(data.addressBook.email).to.be("info@example.com");
                    expect(data.addressBook.phone).to.be.a('string');
                    expect(data.addressBook.phone).to.be("09110000000");
                    expect(data.addressBook.firstName).to.be.a('string');
                    expect(data.addressBook.firstName).to.be("پوریا");
                    expect(data.addressBook.lastName).to.be.a('string');
                    expect(data.addressBook.lastName).to.be("منفرد");
                    expect(data.addressBook.businessName).to.be.a('string');
                    expect(data.addressBook.businessName).to.be("پی پینگ");
                    expect(data.addressBook.additionalInfo).to.be.a('string');
                    expect(data.addressBook.additionalInfo).to.be("او یک وکیل است");
                    expect(data.addressBook.memo).to.be.a('string');
                    expect(data.addressBook.memo).to.be("در پی پینگ با ایشان آشنا شدم");
                    expect(data.addressBook.zipCode).to.be.a('string');
                    expect(data.addressBook.zipCode).to.be("46169696164");
                    expect(data.addressBook.state).to.be.a('string');
                    expect(data.addressBook.state).to.be("تهران");
                    expect(data.addressBook.city).to.be.a('string');
                    expect(data.addressBook.city).to.be("تهران");
                    expect(data.addressBook.location).to.be.a('string');
                    expect(data.addressBook.location).to.be("خیابان جمهوری");
                    expect(data.addressBook.isBusiness).to.be.a('boolean');
                    expect(data.addressBook.isBusiness).to.be(false);
                    expect(data.addressBook.nationalId).to.be.a('string');
                    expect(data.addressBook.nationalId).to.be("22266655591");
  
                        }
              }
              expect(data.status).to.be.a('number');
              expect(data.status).to.be(0);
              expect(data.paidManualDescription).to.be.a('string');
              expect(data.paidManualDescription).to.be("");
              expect(data.saveToTemplate).to.be.a('boolean');
              expect(data.saveToTemplate).to.be(false);
              expect(data.invoiceNumber).to.be.a('number');
              expect(data.invoiceNumber).to.be("0");
              expect(data.invoiceTitle).to.be.a('string');
              expect(data.invoiceTitle).to.be("");
              expect(data.invoiceDateTime).to.be.a(Date);
              expect(data.invoiceDateTime).to.be(new Date());
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.payedDateTime).to.be.a(Date);
              expect(data.payedDateTime).to.be(new Date());
              expect(data.canceledDateTime).to.be.a(Date);
              expect(data.canceledDateTime).to.be(new Date());
              expect(data.subTotal).to.be.a('number');
              expect(data.subTotal).to.be(0.0);
              expect(data.itemsDiscountAmount).to.be.a('number');
              expect(data.itemsDiscountAmount).to.be(0.0);
              expect(data.totalDiscountAmount).to.be.a('number');
              expect(data.totalDiscountAmount).to.be(0.0);
              expect(data.totalDiscountPercent).to.be.a('number');
              expect(data.totalDiscountPercent).to.be(0);
              expect(data.totalDiscountType).to.be.a('number');
              expect(data.totalDiscountType).to.be(0);
              expect(data.sumDiscountAmount).to.be.a('number');
              expect(data.sumDiscountAmount).to.be(0.0);
              expect(data.totalTaxtionAmount).to.be.a('number');
              expect(data.totalTaxtionAmount).to.be(0.0);
              expect(data.shipping).to.be.a('number');
              expect(data.shipping).to.be(0.0);
              expect(data.total).to.be.a('number');
              expect(data.total).to.be(0.0);
              expect(data.notes).to.be.a('string');
              expect(data.notes).to.be("");
              expect(data.termsAndConditions).to.be.a('string');
              expect(data.termsAndConditions).to.be("");
              expect(data.memo).to.be.a('string');
              expect(data.memo).to.be("");
              expect(data.invoiceSchulder).to.be.a(_.InvoiceSchulderDetailViewModel);
                    expect(data.invoiceSchulder.repeat).to.be.a('number');
                expect(data.invoiceSchulder.repeat).to.be(0);
                expect(data.invoiceSchulder.schulderType).to.be.a('number');
                expect(data.invoiceSchulder.schulderType).to.be(0);
                expect(data.invoiceSchulder.dueType).to.be.a('number');
                expect(data.invoiceSchulder.dueType).to.be(0);
                expect(data.invoiceSchulder.endValue).to.be.a('string');
                expect(data.invoiceSchulder.endValue).to.be("");
                expect(data.invoiceSchulder.dueDateAfterHowManyDay).to.be.a('number');
                expect(data.invoiceSchulder.dueDateAfterHowManyDay).to.be(0);
                {
                  let dataCtr = data.invoiceSchulder.invoiceSubSchulders;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(_.InvoiceSubSchulderDetailViewModel);
                    expect(data.dueDate).to.be.a(Date);
                    expect(data.dueDate).to.be(new Date());
                    expect(data.mustBeCreateInDateTime).to.be.a(Date);
                    expect(data.mustBeCreateInDateTime).to.be(new Date());
                    expect(data.deActiveDateTime).to.be.a(Date);
                    expect(data.deActiveDateTime).to.be(new Date());
                    expect(data.isInvoiceCreated).to.be.a('boolean');
                    expect(data.isInvoiceCreated).to.be(false);
                    expect(data.isActive).to.be.a('boolean');
                    expect(data.isActive).to.be(false);
                    expect(data.invoiceCode).to.be.a('string');
                    expect(data.invoiceCode).to.be("");
    
                          }
                }
              {
                let dataCtr = data.invoiceItems;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(_.InvoiceItemDetailViewModel);
                  expect(data.code).to.be.a('string');
                  expect(data.code).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.quantity).to.be.a('number');
                  expect(data.quantity).to.be(0);
                  expect(data.discountType).to.be.a('number');
                  expect(data.discountType).to.be(0);
                  expect(data.discountPercent).to.be.a('number');
                  expect(data.discountPercent).to.be(0);
                  expect(data.discountAmount).to.be.a('number');
                  expect(data.discountAmount).to.be(0.0);
                  expect(data.tax).to.be.a('boolean');
                  expect(data.tax).to.be(false);
                  expect(data.taxRate).to.be.a('number');
                  expect(data.taxRate).to.be(0);
                  expect(data.price).to.be.a('number');
                  expect(data.price).to.be(0.0);
                  expect(data.totalPrice).to.be.a('number');
                  expect(data.totalPrice).to.be(0.0);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0.0);
  
                        }
              }
              expect(data.isSendAttachmentsAfterPayment).to.be.a('boolean');
              expect(data.isSendAttachmentsAfterPayment).to.be(false);
              expect(data.isSendNotesAndTermsAfterPayment).to.be.a('boolean');
              expect(data.isSendNotesAndTermsAfterPayment).to.be(false);
              expect(data.isSendTermsAfterPayment).to.be.a('boolean');
              expect(data.isSendTermsAfterPayment).to.be(false);
              {
                let dataCtr = data.attachFileIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.attachFileAddresses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.qrCodeFileName).to.be.a('string');
              expect(data.qrCodeFileName).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceSendByTemplateSimple', function() {
        it('should call invoiceSendByTemplateSimple successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceSendByTemplateSimple call and complete the assertions
          /*
          var opts = {};
          opts.value = new _.InvoiceSendByTemplateSimple();
          opts.value.templateCode = "";
          opts.value.emailAddresses = [""];
          opts.value.addressBook = new _.AddressBookCreateViewModel();
          opts.value.addressBook.userPhotoFileId = "";
          opts.value.addressBook.email = "info@example.com";
          opts.value.addressBook.phone = "09110000000";
          opts.value.addressBook.firstName = "پوریا";
          opts.value.addressBook.lastName = "منفرد";
          opts.value.addressBook.businessName = "پی پینگ";
          opts.value.addressBook.additionalInfo = "او یک وکیل است";
          opts.value.addressBook.zipCode = "46169696164";
          opts.value.addressBook.state = "تهران";
          opts.value.addressBook.city = "تهران";
          opts.value.addressBook.location = "خیابان جمهوری";
          opts.value.addressBook.memo = "به او مبلغی بدهکار می باشم";
          opts.value.addressBook.isBusiness = false;
          opts.value.addressBook.nationalId = "22266655591";

          instance.invoiceSendByTemplateSimple(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(_.InvoiceDetailViewModel);
            expect(data.code).to.be.a('string');
            expect(data.code).to.be("");
            expect(data.parentCode).to.be.a('string');
            expect(data.parentCode).to.be("");
            expect(data.paymentCode).to.be.a('string');
            expect(data.paymentCode).to.be("");
            {
              let dataCtr = data.ccToes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(_.InvoiceCcToDetailViewModel);
                expect(data.emailAddress).to.be.a('string');
                expect(data.emailAddress).to.be("");

                      }
            }
            {
              let dataCtr = data.billToes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(_.InvoiceBillToDetailViewModel);
                expect(data.addressBook).to.be.a(_.AddressBookDetailViewModel);
                      expect(data.addressBook.code).to.be.a('string');
                  expect(data.addressBook.code).to.be("");
                  expect(data.addressBook.userPhotoFileAddress).to.be.a('string');
                  expect(data.addressBook.userPhotoFileAddress).to.be("");
                  expect(data.addressBook.userPhotoFileId).to.be.a('string');
                  expect(data.addressBook.userPhotoFileId).to.be("");
                  expect(data.addressBook.email).to.be.a('string');
                  expect(data.addressBook.email).to.be("info@example.com");
                  expect(data.addressBook.phone).to.be.a('string');
                  expect(data.addressBook.phone).to.be("09110000000");
                  expect(data.addressBook.firstName).to.be.a('string');
                  expect(data.addressBook.firstName).to.be("پوریا");
                  expect(data.addressBook.lastName).to.be.a('string');
                  expect(data.addressBook.lastName).to.be("منفرد");
                  expect(data.addressBook.businessName).to.be.a('string');
                  expect(data.addressBook.businessName).to.be("پی پینگ");
                  expect(data.addressBook.additionalInfo).to.be.a('string');
                  expect(data.addressBook.additionalInfo).to.be("او یک وکیل است");
                  expect(data.addressBook.memo).to.be.a('string');
                  expect(data.addressBook.memo).to.be("در پی پینگ با ایشان آشنا شدم");
                  expect(data.addressBook.zipCode).to.be.a('string');
                  expect(data.addressBook.zipCode).to.be("46169696164");
                  expect(data.addressBook.state).to.be.a('string');
                  expect(data.addressBook.state).to.be("تهران");
                  expect(data.addressBook.city).to.be.a('string');
                  expect(data.addressBook.city).to.be("تهران");
                  expect(data.addressBook.location).to.be.a('string');
                  expect(data.addressBook.location).to.be("خیابان جمهوری");
                  expect(data.addressBook.isBusiness).to.be.a('boolean');
                  expect(data.addressBook.isBusiness).to.be(false);
                  expect(data.addressBook.nationalId).to.be.a('string');
                  expect(data.addressBook.nationalId).to.be("22266655591");

                      }
            }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(0);
            expect(data.paidManualDescription).to.be.a('string');
            expect(data.paidManualDescription).to.be("");
            expect(data.saveToTemplate).to.be.a('boolean');
            expect(data.saveToTemplate).to.be(false);
            expect(data.invoiceNumber).to.be.a('number');
            expect(data.invoiceNumber).to.be("0");
            expect(data.invoiceTitle).to.be.a('string');
            expect(data.invoiceTitle).to.be("");
            expect(data.invoiceDateTime).to.be.a(Date);
            expect(data.invoiceDateTime).to.be(new Date());
            expect(data.dueDate).to.be.a(Date);
            expect(data.dueDate).to.be(new Date());
            expect(data.payedDateTime).to.be.a(Date);
            expect(data.payedDateTime).to.be(new Date());
            expect(data.canceledDateTime).to.be.a(Date);
            expect(data.canceledDateTime).to.be(new Date());
            expect(data.subTotal).to.be.a('number');
            expect(data.subTotal).to.be(0.0);
            expect(data.itemsDiscountAmount).to.be.a('number');
            expect(data.itemsDiscountAmount).to.be(0.0);
            expect(data.totalDiscountAmount).to.be.a('number');
            expect(data.totalDiscountAmount).to.be(0.0);
            expect(data.totalDiscountPercent).to.be.a('number');
            expect(data.totalDiscountPercent).to.be(0);
            expect(data.totalDiscountType).to.be.a('number');
            expect(data.totalDiscountType).to.be(0);
            expect(data.sumDiscountAmount).to.be.a('number');
            expect(data.sumDiscountAmount).to.be(0.0);
            expect(data.totalTaxtionAmount).to.be.a('number');
            expect(data.totalTaxtionAmount).to.be(0.0);
            expect(data.shipping).to.be.a('number');
            expect(data.shipping).to.be(0.0);
            expect(data.total).to.be.a('number');
            expect(data.total).to.be(0.0);
            expect(data.notes).to.be.a('string');
            expect(data.notes).to.be("");
            expect(data.termsAndConditions).to.be.a('string');
            expect(data.termsAndConditions).to.be("");
            expect(data.memo).to.be.a('string');
            expect(data.memo).to.be("");
            expect(data.invoiceSchulder).to.be.a(_.InvoiceSchulderDetailViewModel);
                  expect(data.invoiceSchulder.repeat).to.be.a('number');
              expect(data.invoiceSchulder.repeat).to.be(0);
              expect(data.invoiceSchulder.schulderType).to.be.a('number');
              expect(data.invoiceSchulder.schulderType).to.be(0);
              expect(data.invoiceSchulder.dueType).to.be.a('number');
              expect(data.invoiceSchulder.dueType).to.be(0);
              expect(data.invoiceSchulder.endValue).to.be.a('string');
              expect(data.invoiceSchulder.endValue).to.be("");
              expect(data.invoiceSchulder.dueDateAfterHowManyDay).to.be.a('number');
              expect(data.invoiceSchulder.dueDateAfterHowManyDay).to.be(0);
              {
                let dataCtr = data.invoiceSchulder.invoiceSubSchulders;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(_.InvoiceSubSchulderDetailViewModel);
                  expect(data.dueDate).to.be.a(Date);
                  expect(data.dueDate).to.be(new Date());
                  expect(data.mustBeCreateInDateTime).to.be.a(Date);
                  expect(data.mustBeCreateInDateTime).to.be(new Date());
                  expect(data.deActiveDateTime).to.be.a(Date);
                  expect(data.deActiveDateTime).to.be(new Date());
                  expect(data.isInvoiceCreated).to.be.a('boolean');
                  expect(data.isInvoiceCreated).to.be(false);
                  expect(data.isActive).to.be.a('boolean');
                  expect(data.isActive).to.be(false);
                  expect(data.invoiceCode).to.be.a('string');
                  expect(data.invoiceCode).to.be("");
  
                        }
              }
            {
              let dataCtr = data.invoiceItems;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(_.InvoiceItemDetailViewModel);
                expect(data.code).to.be.a('string');
                expect(data.code).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0);
                expect(data.discountType).to.be.a('number');
                expect(data.discountType).to.be(0);
                expect(data.discountPercent).to.be.a('number');
                expect(data.discountPercent).to.be(0);
                expect(data.discountAmount).to.be.a('number');
                expect(data.discountAmount).to.be(0.0);
                expect(data.tax).to.be.a('boolean');
                expect(data.tax).to.be(false);
                expect(data.taxRate).to.be.a('number');
                expect(data.taxRate).to.be(0);
                expect(data.price).to.be.a('number');
                expect(data.price).to.be(0.0);
                expect(data.totalPrice).to.be.a('number');
                expect(data.totalPrice).to.be(0.0);
                expect(data.amount).to.be.a('number');
                expect(data.amount).to.be(0.0);

                      }
            }
            expect(data.isSendAttachmentsAfterPayment).to.be.a('boolean');
            expect(data.isSendAttachmentsAfterPayment).to.be(false);
            expect(data.isSendNotesAndTermsAfterPayment).to.be.a('boolean');
            expect(data.isSendNotesAndTermsAfterPayment).to.be(false);
            expect(data.isSendTermsAfterPayment).to.be.a('boolean');
            expect(data.isSendTermsAfterPayment).to.be(false);
            {
              let dataCtr = data.attachFileIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.attachFileAddresses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.qrCodeFileName).to.be.a('string');
            expect(data.qrCodeFileName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceSetCustomer', function() {
        it('should call invoiceSetCustomer successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceSetCustomer call and complete the assertions
          /*
          var opts = {};
          opts.value = new _.InvoiceSetCustomerRequestViewModel();
          opts.value.invoiceCode = "";
          opts.value.customer = new _.AddressBookCreateViewModel();
          opts.value.customer.userPhotoFileId = "";
          opts.value.customer.email = "info@example.com";
          opts.value.customer.phone = "09110000000";
          opts.value.customer.firstName = "پوریا";
          opts.value.customer.lastName = "منفرد";
          opts.value.customer.businessName = "پی پینگ";
          opts.value.customer.additionalInfo = "او یک وکیل است";
          opts.value.customer.zipCode = "46169696164";
          opts.value.customer.state = "تهران";
          opts.value.customer.city = "تهران";
          opts.value.customer.location = "خیابان جمهوری";
          opts.value.customer.memo = "به او مبلغی بدهکار می باشم";
          opts.value.customer.isBusiness = false;
          opts.value.customer.nationalId = "22266655591";

          instance.invoiceSetCustomer(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(_.InvoiceConfirmPaymentResponseViewModel);
            expect(data.success).to.be.a('boolean');
            expect(data.success).to.be(false);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.modelCode).to.be.a('string');
            expect(data.modelCode).to.be("");
            expect(data.refId).to.be.a('string');
            expect(data.refId).to.be("");
            expect(data.previewKey).to.be.a('string');
            expect(data.previewKey).to.be("");
            expect(data.invoice).to.be.a(_.InvoiceInPublicShow);
                  expect(data.invoice.previewKey).to.be.a('string');
              expect(data.invoice.previewKey).to.be("");
              expect(data.invoice.invoice).to.be.a(_.InvoicePublicDetailViewModel);
                    expect(data.invoice.invoice.payedDateTime).to.be.a(Date);
                expect(data.invoice.invoice.payedDateTime).to.be(new Date());
                expect(data.invoice.invoice.canceledDateTime).to.be.a(Date);
                expect(data.invoice.invoice.canceledDateTime).to.be(new Date());
                expect(data.invoice.invoice.expiredDateTime).to.be.a(Date);
                expect(data.invoice.invoice.expiredDateTime).to.be(new Date());
                expect(data.invoice.invoice.code).to.be.a('string');
                expect(data.invoice.invoice.code).to.be("");
                expect(data.invoice.invoice.parentCode).to.be.a('string');
                expect(data.invoice.invoice.parentCode).to.be("");
                expect(data.invoice.invoice.paymentCode).to.be.a('string');
                expect(data.invoice.invoice.paymentCode).to.be("");
                {
                  let dataCtr = data.invoice.invoice.ccToes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(_.InvoiceCcToDetailViewModel);
                    expect(data.emailAddress).to.be.a('string');
                    expect(data.emailAddress).to.be("");
    
                          }
                }
                {
                  let dataCtr = data.invoice.invoice.billToes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(_.InvoiceBillToDetailViewModel);
                    expect(data.addressBook).to.be.a(_.AddressBookDetailViewModel);
                          expect(data.addressBook.code).to.be.a('string');
                      expect(data.addressBook.code).to.be("");
                      expect(data.addressBook.userPhotoFileAddress).to.be.a('string');
                      expect(data.addressBook.userPhotoFileAddress).to.be("");
                      expect(data.addressBook.userPhotoFileId).to.be.a('string');
                      expect(data.addressBook.userPhotoFileId).to.be("");
                      expect(data.addressBook.email).to.be.a('string');
                      expect(data.addressBook.email).to.be("info@example.com");
                      expect(data.addressBook.phone).to.be.a('string');
                      expect(data.addressBook.phone).to.be("09110000000");
                      expect(data.addressBook.firstName).to.be.a('string');
                      expect(data.addressBook.firstName).to.be("پوریا");
                      expect(data.addressBook.lastName).to.be.a('string');
                      expect(data.addressBook.lastName).to.be("منفرد");
                      expect(data.addressBook.businessName).to.be.a('string');
                      expect(data.addressBook.businessName).to.be("پی پینگ");
                      expect(data.addressBook.additionalInfo).to.be.a('string');
                      expect(data.addressBook.additionalInfo).to.be("او یک وکیل است");
                      expect(data.addressBook.memo).to.be.a('string');
                      expect(data.addressBook.memo).to.be("در پی پینگ با ایشان آشنا شدم");
                      expect(data.addressBook.zipCode).to.be.a('string');
                      expect(data.addressBook.zipCode).to.be("46169696164");
                      expect(data.addressBook.state).to.be.a('string');
                      expect(data.addressBook.state).to.be("تهران");
                      expect(data.addressBook.city).to.be.a('string');
                      expect(data.addressBook.city).to.be("تهران");
                      expect(data.addressBook.location).to.be.a('string');
                      expect(data.addressBook.location).to.be("خیابان جمهوری");
                      expect(data.addressBook.isBusiness).to.be.a('boolean');
                      expect(data.addressBook.isBusiness).to.be(false);
                      expect(data.addressBook.nationalId).to.be.a('string');
                      expect(data.addressBook.nationalId).to.be("22266655591");
    
                          }
                }
                expect(data.invoice.invoice.status).to.be.a('number');
                expect(data.invoice.invoice.status).to.be(0);
                expect(data.invoice.invoice.paidManualDescription).to.be.a('string');
                expect(data.invoice.invoice.paidManualDescription).to.be("");
                expect(data.invoice.invoice.saveToTemplate).to.be.a('boolean');
                expect(data.invoice.invoice.saveToTemplate).to.be(false);
                expect(data.invoice.invoice.invoiceNumber).to.be.a('number');
                expect(data.invoice.invoice.invoiceNumber).to.be("0");
                expect(data.invoice.invoice.invoiceTitle).to.be.a('string');
                expect(data.invoice.invoice.invoiceTitle).to.be("");
                expect(data.invoice.invoice.invoiceDateTime).to.be.a(Date);
                expect(data.invoice.invoice.invoiceDateTime).to.be(new Date());
                expect(data.invoice.invoice.dueDate).to.be.a(Date);
                expect(data.invoice.invoice.dueDate).to.be(new Date());
                expect(data.invoice.invoice.subTotal).to.be.a('number');
                expect(data.invoice.invoice.subTotal).to.be(0.0);
                expect(data.invoice.invoice.itemsDiscountAmount).to.be.a('number');
                expect(data.invoice.invoice.itemsDiscountAmount).to.be(0.0);
                expect(data.invoice.invoice.totalDiscountAmount).to.be.a('number');
                expect(data.invoice.invoice.totalDiscountAmount).to.be(0.0);
                expect(data.invoice.invoice.totalDiscountPercent).to.be.a('number');
                expect(data.invoice.invoice.totalDiscountPercent).to.be(0);
                expect(data.invoice.invoice.totalDiscountType).to.be.a('number');
                expect(data.invoice.invoice.totalDiscountType).to.be(0);
                expect(data.invoice.invoice.sumDiscountAmount).to.be.a('number');
                expect(data.invoice.invoice.sumDiscountAmount).to.be(0.0);
                expect(data.invoice.invoice.totalTaxtionAmount).to.be.a('number');
                expect(data.invoice.invoice.totalTaxtionAmount).to.be(0.0);
                expect(data.invoice.invoice.shipping).to.be.a('number');
                expect(data.invoice.invoice.shipping).to.be(0.0);
                expect(data.invoice.invoice.total).to.be.a('number');
                expect(data.invoice.invoice.total).to.be(0.0);
                expect(data.invoice.invoice.notes).to.be.a('string');
                expect(data.invoice.invoice.notes).to.be("");
                expect(data.invoice.invoice.termsAndConditions).to.be.a('string');
                expect(data.invoice.invoice.termsAndConditions).to.be("");
                expect(data.invoice.invoice.memo).to.be.a('string');
                expect(data.invoice.invoice.memo).to.be("");
                expect(data.invoice.invoice.invoiceSchulder).to.be.a(_.InvoiceSchulderDetailViewModel);
                      expect(data.invoice.invoice.invoiceSchulder.repeat).to.be.a('number');
                  expect(data.invoice.invoice.invoiceSchulder.repeat).to.be(0);
                  expect(data.invoice.invoice.invoiceSchulder.schulderType).to.be.a('number');
                  expect(data.invoice.invoice.invoiceSchulder.schulderType).to.be(0);
                  expect(data.invoice.invoice.invoiceSchulder.dueType).to.be.a('number');
                  expect(data.invoice.invoice.invoiceSchulder.dueType).to.be(0);
                  expect(data.invoice.invoice.invoiceSchulder.endValue).to.be.a('string');
                  expect(data.invoice.invoice.invoiceSchulder.endValue).to.be("");
                  expect(data.invoice.invoice.invoiceSchulder.dueDateAfterHowManyDay).to.be.a('number');
                  expect(data.invoice.invoice.invoiceSchulder.dueDateAfterHowManyDay).to.be(0);
                  {
                    let dataCtr = data.invoice.invoice.invoiceSchulder.invoiceSubSchulders;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(_.InvoiceSubSchulderDetailViewModel);
                      expect(data.dueDate).to.be.a(Date);
                      expect(data.dueDate).to.be(new Date());
                      expect(data.mustBeCreateInDateTime).to.be.a(Date);
                      expect(data.mustBeCreateInDateTime).to.be(new Date());
                      expect(data.deActiveDateTime).to.be.a(Date);
                      expect(data.deActiveDateTime).to.be(new Date());
                      expect(data.isInvoiceCreated).to.be.a('boolean');
                      expect(data.isInvoiceCreated).to.be(false);
                      expect(data.isActive).to.be.a('boolean');
                      expect(data.isActive).to.be(false);
                      expect(data.invoiceCode).to.be.a('string');
                      expect(data.invoiceCode).to.be("");
      
                            }
                  }
                {
                  let dataCtr = data.invoice.invoice.invoiceItems;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(_.InvoiceItemDetailViewModel);
                    expect(data.code).to.be.a('string');
                    expect(data.code).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.quantity).to.be.a('number');
                    expect(data.quantity).to.be(0);
                    expect(data.discountType).to.be.a('number');
                    expect(data.discountType).to.be(0);
                    expect(data.discountPercent).to.be.a('number');
                    expect(data.discountPercent).to.be(0);
                    expect(data.discountAmount).to.be.a('number');
                    expect(data.discountAmount).to.be(0.0);
                    expect(data.tax).to.be.a('boolean');
                    expect(data.tax).to.be(false);
                    expect(data.taxRate).to.be.a('number');
                    expect(data.taxRate).to.be(0);
                    expect(data.price).to.be.a('number');
                    expect(data.price).to.be(0.0);
                    expect(data.totalPrice).to.be.a('number');
                    expect(data.totalPrice).to.be(0.0);
                    expect(data.amount).to.be.a('number');
                    expect(data.amount).to.be(0.0);
    
                          }
                }
                expect(data.invoice.invoice.isSendAttachmentsAfterPayment).to.be.a('boolean');
                expect(data.invoice.invoice.isSendAttachmentsAfterPayment).to.be(false);
                expect(data.invoice.invoice.isSendNotesAndTermsAfterPayment).to.be.a('boolean');
                expect(data.invoice.invoice.isSendNotesAndTermsAfterPayment).to.be(false);
                expect(data.invoice.invoice.isSendTermsAfterPayment).to.be.a('boolean');
                expect(data.invoice.invoice.isSendTermsAfterPayment).to.be(false);
                {
                  let dataCtr = data.invoice.invoice.attachFileIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.invoice.invoice.attachFileAddresses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.invoice.invoice.qrCodeFileName).to.be.a('string');
                expect(data.invoice.invoice.qrCodeFileName).to.be("");
              expect(data.invoice.ownerInfo).to.be.a(_.UserInfoInPublicShow);
                    expect(data.invoice.ownerInfo.name).to.be.a('string');
                expect(data.invoice.ownerInfo.name).to.be("");
                expect(data.invoice.ownerInfo.profilePicture).to.be.a('string');
                expect(data.invoice.ownerInfo.profilePicture).to.be("");
                expect(data.invoice.ownerInfo.isBusiness).to.be.a('boolean');
                expect(data.invoice.ownerInfo.isBusiness).to.be(false);
                expect(data.invoice.ownerInfo.verifyType).to.be.a('number');
                expect(data.invoice.ownerInfo.verifyType).to.be(0);
                expect(data.invoice.ownerInfo.socials).to.be.a(_.SocialUserInfoExtraViewModel);
                      expect(data.invoice.ownerInfo.socials.site).to.be.a('string');
                  expect(data.invoice.ownerInfo.socials.site).to.be("");
                  expect(data.invoice.ownerInfo.socials.instagram).to.be.a('string');
                  expect(data.invoice.ownerInfo.socials.instagram).to.be("");
                  expect(data.invoice.ownerInfo.socials.telegram).to.be.a('string');
                  expect(data.invoice.ownerInfo.socials.telegram).to.be("");
                  expect(data.invoice.ownerInfo.socials.twitter).to.be.a('string');
                  expect(data.invoice.ownerInfo.socials.twitter).to.be("");
                  expect(data.invoice.ownerInfo.socials.allSocialIsNull).to.be.a('boolean');
                  expect(data.invoice.ownerInfo.socials.allSocialIsNull).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceSubschedulers', function() {
        it('should call invoiceSubschedulers successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceSubschedulers call and complete the assertions
          /*
          var code = "code_example";

          instance.invoiceSubschedulers(code, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(_.InvoiceSubSchulderDetailViewModel);
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.mustBeCreateInDateTime).to.be.a(Date);
              expect(data.mustBeCreateInDateTime).to.be(new Date());
              expect(data.deActiveDateTime).to.be.a(Date);
              expect(data.deActiveDateTime).to.be(new Date());
              expect(data.isInvoiceCreated).to.be.a('boolean');
              expect(data.isInvoiceCreated).to.be(false);
              expect(data.isActive).to.be.a('boolean');
              expect(data.isActive).to.be(false);
              expect(data.invoiceCode).to.be.a('string');
              expect(data.invoiceCode).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceSumPerStatus', function() {
        it('should call invoiceSumPerStatus successfully', function(done) {
          // TODO: uncomment invoiceSumPerStatus call and complete the assertions
          /*

          instance.invoiceSumPerStatus(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(_.InvoiceDashboardReportViewModel);
            expect(data.draftAmount).to.be.a('number');
            expect(data.draftAmount).to.be(0.0);
            expect(data.paidAmount).to.be.a('number');
            expect(data.paidAmount).to.be(0.0);
            expect(data.unpaidAmount).to.be.a('number');
            expect(data.unpaidAmount).to.be(0.0);
            expect(data.expiredAmount).to.be.a('number');
            expect(data.expiredAmount).to.be(0.0);
            expect(data.cancelAmount).to.be.a('number');
            expect(data.cancelAmount).to.be(0.0);
            expect(data.draftAmountStr).to.be.a('string');
            expect(data.draftAmountStr).to.be("");
            expect(data.paidAmountStr).to.be.a('string');
            expect(data.paidAmountStr).to.be("");
            expect(data.unpaidAmountStr).to.be.a('string');
            expect(data.unpaidAmountStr).to.be("");
            expect(data.expiredAmountStr).to.be.a('string');
            expect(data.expiredAmountStr).to.be("");
            expect(data.cancelAmountStr).to.be.a('string');
            expect(data.cancelAmountStr).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
